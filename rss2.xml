<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hong3의 개발블로그</title>
    <link>http://hongdonghyun.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발을 잘하고 싶읍니다</description>
    <pubDate>Mon, 02 Dec 2019 05:07:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Swift]문제 풀이</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/</guid>
      <pubDate>Mon, 02 Dec 2019 01:02:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1번문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1번문제&quot;&gt;&lt;/a&gt; 1번문제&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;자연수 하나를 입력받아 1년부터 그 해까지의 모든 윤년의 개수를 출력하는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="1번문제"><a class="markdownIt-Anchor" href="#1번문제"></a> 1번문제</h1><ul><li>자연수 하나를 입력받아 1년부터 그 해까지의 모든 윤년의 개수를 출력하는 함수</li></ul><p>Intput : 2019<br />Output : 윤년에 속하는 해는 총 489회입니다.</p><h2 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">year</span><span class="params">(<span class="number">_</span> input: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> yearCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...input &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">400</span> == <span class="number">0</span> || i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span> &#123;</span><br><span class="line">            yearCount += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"윤년에 속하는 해는 총 \(yearCount)회 입니다."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2번문제"><a class="markdownIt-Anchor" href="#2번문제"></a> 2번문제</h1><ul><li>주어진 문자 배열에서 중복되지 않는 문자만을 뽑아내 배열로 반환해주는 함수</li></ul><blockquote><p>Input : [“a”, “b”, “c”, “a”, “e”, “d”, “c”]<br />Output : [“b”, “e” ,“d”]</p></blockquote><h2 id="풀이-2"><a class="markdownIt-Anchor" href="#풀이-2"></a> 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">duplicateCheck</span><span class="params">(<span class="number">_</span> charArray: [Character])</span></span> -&gt; [<span class="type">Character</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> setArray = <span class="type">Set</span>(charArray)</span><br><span class="line">    <span class="keyword">var</span> duplicate: [<span class="type">Character</span>]  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...charArray.<span class="built_in">count</span>-<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i+<span class="number">1</span>..&lt;charArray.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> charArray[i] == charArray[j] &#123;</span><br><span class="line">                duplicate.append(charArray[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(setArray.subtracting(duplicate))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3번문제"><a class="markdownIt-Anchor" href="#3번문제"></a> 3번문제</h1><ul><li>자연수를 입력받아 그 숫자보다 작거나 같은 모든 소수와 그 개수를 출력하는 함수를 정의</li></ul><blockquote><p>Input : 10<br />Output : 10보다 작거나 같은 소수는 [2, 3, 5, 7]이고, 총 4개입니다.</p></blockquote><h2 id="풀이-3"><a class="markdownIt-Anchor" href="#풀이-3"></a> 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(<span class="number">_</span> i: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">2</span>..&lt;i &#123;</span><br><span class="line">            <span class="keyword">if</span> i % j == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPrimeNumbers</span><span class="params">(number: Int)</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> primeArray: [<span class="type">Int</span>] = []</span><br><span class="line">    <span class="keyword">if</span> number == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(primeArray)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...number &#123;</span><br><span class="line">            <span class="keyword">if</span> isPrime(i) &#123;</span><br><span class="line">                primeArray.append(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(number)보다 작거나 같은 소수는\(primeArray)이고 총 \(primeArray.count)개입니다."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4번문제"><a class="markdownIt-Anchor" href="#4번문제"></a> 4번문제</h1><ul><li>구글(google), 카카오(kakao), 네이버(naver) 로그인을 위해 Site라는 이름의 Enum 타입을 만들고자 합니다.<br />각 case는 사용자의 아이디(String)와 비밀번호(String)를 위한 연관 값(associated value)을  가집니다.<br />그리고 Site 타입 내부에는 signIn()이라는 이름의 메서드를 만들어 다음과 같이 문자열을 출력하는 기능을 구현해보세요.</li></ul><blockquote><p>Input<br />let google = Site.google(“<a href="mailto:google@gmail.com" target="_blank" rel="noopener">google@gmail.com</a>”, “0000”)<br />google.signIn()</p></blockquote><blockquote><p>Output<br />구글에 로그인하였습니다. (아이디 - <a href="mailto:google@gmail.com" target="_blank" rel="noopener">google@gmail.com</a>, 비밀번호 - 0000)</p></blockquote><h2 id="풀이-4"><a class="markdownIt-Anchor" href="#풀이-4"></a> 풀이</h2> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> google(<span class="number">_</span> <span class="type">ID</span>: <span class="type">String</span>, <span class="number">_</span> <span class="type">PWD</span>: <span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> kakao(<span class="number">_</span> <span class="type">ID</span>: <span class="type">String</span>, <span class="number">_</span> <span class="type">PWD</span>: <span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> naver(<span class="number">_</span> <span class="type">ID</span>: <span class="type">String</span>, <span class="number">_</span> <span class="type">PWD</span>: <span class="type">String</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">signIn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .google(<span class="keyword">let</span> i, <span class="keyword">let</span> p):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"구글에 로그인하였습니다.(아이디 - \(i), 비밀번호 -\(p)"</span>)</span><br><span class="line">        <span class="keyword">case</span> .kakao(<span class="keyword">let</span> i, <span class="keyword">let</span> p):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"카카오에 로그인하였습니다.(아이디 - \(i), 비밀번호 -\(p)"</span>)</span><br><span class="line">        <span class="keyword">case</span> .naver(<span class="keyword">let</span> i, <span class="keyword">let</span> p):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"네이버에 로그인하였습니다.(아이디 - \(i), 비밀번호 -\(p)"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Error!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> google = <span class="type">Site</span>.google(<span class="string">"hong4367@gmail.com"</span>,<span class="string">"12345"</span>)</span><br><span class="line"><span class="keyword">let</span> kakao = <span class="type">Site</span>.kakao(<span class="string">"hong4367@gmail.com"</span>,<span class="string">"12345"</span>)</span><br><span class="line"><span class="keyword">let</span> naver = <span class="type">Site</span>.naver(<span class="string">"hong4367@gmail.com"</span>,<span class="string">"12345"</span>)</span><br><span class="line"></span><br><span class="line">google.signIn()</span><br><span class="line">kakao.signIn()</span><br><span class="line">naver.signIn()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]if와 guard</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-if%EC%99%80-guard/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-if%EC%99%80-guard/</guid>
      <pubDate>Thu, 28 Nov 2019 01:21:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;if와-guard&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#if와-guard&quot;&gt;&lt;/a&gt; if와 guard&lt;/h1&gt;
&lt;p&gt;swift를 처음 배울때 &lt;code&gt;Optional&lt;/code&gt;이라는 개념에서 신기했었는데,
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="if와-guard"><a class="markdownIt-Anchor" href="#if와-guard"></a> if와 guard</h1><p>swift를 처음 배울때 <code>Optional</code>이라는 개념에서 신기했었는데,</p><p><code>Optional</code>이라는것을 풀어주기 위해 <code>Optional Binding</code>이라는걸 배우고,<br />이 과정에서 <code>if</code>와 ,<code>guard</code> 로 풀 수 있다는걸 배웠다.</p><p><code>if</code>는 많은 언어에서 사용하는 조건문이라 익숙했지만,<br /><code>guard</code>는 처음보는 예약어라 무슨일을 하는건지 궁금해서 찾아보고 포스팅 하게 되었다.</p><h1 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h1><p>if문은 대부분의 사람들이 많은 경험과 학습을 통해<br />자연스럽게 인지할 수 있다.</p><p>if를 한글로 번역해 보면 <code>만약</code>이라는 뜻을 가지고 있다.</p><p><code>입력받은 두 수가 양의정수 일때만 곱해주는 함수</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiple</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> b &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a * b</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런식으로 코드를 작성할 수 있겠다.</p><h1 id="guard"><a class="markdownIt-Anchor" href="#guard"></a> guard</h1><p>다음으로 guard문을 살펴보자.</p><p>적어도 나는 guard라는 문법이 생소했다.</p><p>그래서 swift를 제일 처음 접했을때 Optional Binding이 뭔지도 모르겠는데 그걸 guard let 어쩌고 해서 쓰는 코드를 보고 난감했던 기억이 난다.</p><p>guard를 한글로 번역해보면 <code>방어</code>,<code>방어하다</code> 정도가 된다.</p><p>무언가를 막는다는 뜻으로 이해가 될 것 같다.</p><p>그렇다면 무엇을 막을까?</p><p>if문에서 썼던 코드를 guard로 바꾸어 보자</p><p><code>입력받은 두 수가 양의정수 일때만 곱해주는 함수</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiple</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> a &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> b &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if문의 코드와 비교해보자<br />극적인 효과를 위해 if문을 늘여 쓰긴 했지만<br />한눈에봐도 guard문이 더 간결해진것을 확인할 수 있다.</p><h1 id="언제-무엇을-써야할까"><a class="markdownIt-Anchor" href="#언제-무엇을-써야할까"></a> 언제 무엇을 써야할까?</h1><p>그렇다면 언제 써야할까?</p><p>if문의 depth가 깊어질때나</p><p>조건을 통과하지 못하면 더이상 실행될 필요가 없을때 <code>guard</code>문을 쓰면 좋겠다는 생각이 들었다.</p><blockquote><p>물론 if문으로도 가능하다.<br />하지만 가독성을 해칠위험성이 있다.</p></blockquote><p>guard문은 조건을 만족하지 않는 순간 더이상 아래에있는 코드를 실행하지 않는다.</p><p>if문에 비해 조건검사가 좀 더 명료해지며 간결해진다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-if%EC%99%80-guard/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift Frame과 Bounds</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-Frame%EA%B3%BC-Bounds/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-Frame%EA%B3%BC-Bounds/</guid>
      <pubDate>Wed, 27 Nov 2019 05:24:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;framebound의-구성&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#framebound의-구성&quot;&gt;&lt;/a&gt; Frame,Bound의 구성&lt;/h1&gt;
&lt;img src=&quot;/2019/11/Swift-Frame%EA%B3%B
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="framebound의-구성"><a class="markdownIt-Anchor" href="#framebound의-구성"></a> Frame,Bound의 구성</h1><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame,bounds_1.png" class="" title="asset_img frame,bounds_1"><blockquote><p>UIView안에 있는 내용</p></blockquote><p><code>frame</code>과 <code>bounds</code>는 <code>CGRect</code> 타입으로 되어있다.</p><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame,bounds_2.png" class="" title="asset_img frame,bounds_2"><blockquote><p>CGRect는 <code>origin</code>과 <code>size</code>를 가지며<br />각각 CGPoint와 CGSize를 가진다.</p></blockquote><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame,bounds_3.png" class="" title="asset_img frame,bounds_3"><blockquote><p>CGPoint</p></blockquote><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame,bounds_4.png" class="" title="asset_img frame,bounds_4"><blockquote><p>CGSize</p></blockquote><p>결국 <code>frame</code>과 <code>bounds</code>는 x,y좌표 width(너비),height(높이)를 가지고 있다.</p><h1 id="xy좌표계"><a class="markdownIt-Anchor" href="#xy좌표계"></a> X,Y좌표계</h1><p>Swift에서의 X,Y의 좌표계는 일반적인 좌표계랑 약간 다르다.</p><p>휴대폰 화면을 기준으로 좌측상단이 (X,Y:0,0)이다.</p><p>그리고 X축은 오른쪽으로 갈수록 +가 되고<br />Y축은 아래로 내려갈수록 +가 된다.</p><h1 id="frame"><a class="markdownIt-Anchor" href="#frame"></a> Frame</h1><p><a href="https://developer.apple.com/documentation/uikit/uiview/1622621-frame" target="_blank" rel="noopener">공식문서</a></p><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame1.png" class="" title="asset_img frame1"><p>킹글 번역기 : 수퍼 뷰의 좌표계에서 보기의 위치와 크기를 설명하는 프레임 사각형입니다.</p><p>수-퍼 뷰 -&gt; 상위뷰 -&gt; Frame을 그린 뷰<br />슈퍼뷰의 좌표계 안에서 위치(x,y),크기(width,height)</p><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame_run1.png" class="" title="frame_run1"><blockquote><p>greenView는 x,y값을 0,0으로 주었지만 redView안에있다.<br />슈퍼뷰의 좌표계 안에서 그려진것을 확인할 수 있었다.</p></blockquote><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/frame_run2.png" class="" title="frame_run2"><blockquote><p>가운데로 가자</p></blockquote><p><strong>위,아래 사진을 보며 움직임의 차이점을 보자</strong></p><h1 id="bounds"><a class="markdownIt-Anchor" href="#bounds"></a> Bounds</h1><p><a href="https://developer.apple.com/documentation/uikit/uiview/1622580-bounds" target="_blank" rel="noopener">공식문서</a></p><p>킹글 번역기 : 경계 좌표 : 자체 좌표계에서 뷰의 위치와 크기를 설명합니다</p><p>뷰의 위치(x,y)와 크기(width,height)를 자기 자신의 좌표계를 사용한다.</p><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/bounds_run1.png" class="" title="bounds_run1"><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/bounds_run2.png" class="" title="bounds_run2"><blockquote><p>위 사진은 위치가 바뀌었지만 x,y좌표가 0,0이다.<br />상위뷰와 상관없이 자기 자신의 좌표를 사용하기 때문이다.</p></blockquote><img src="/2019/11/Swift-Frame%EA%B3%BC-Bounds/bounds_run3.gif" class="" title="bounds_run3"><blockquote><p>코드작성을 도와주신 <a href="https://github.com/vkcldhkd" target="_blank" rel="noopener">성현</a>님 감사합니다.</p></blockquote><p>해당 움짤을 보면 녹색의 뷰가 움직이지만<br />실제 코드상에서는 빨간뷰의 bounds값을 바꿔주었다.</p><p>bounds값을 변경하는것은 빨간색뷰를 해당위치로 옮겨서 View를 다시 그리라는 것이므로</p><p>실제로는 녹색뷰는 가만히 있고 빨간색뷰가 슬금슬금 움직여서 움직이는것 처럼 보이는것이다.</p><h2 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h2><p>Frame = 슈퍼뷰(상위뷰)의 좌표계에서 위치와 크기를 나타낸다.</p><p>Bounds = 자기자신의 좌표계에서 위치와 크기를 나타낸다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-Frame%EA%B3%BC-Bounds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]하노이의탑</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%98%EB%85%B8%EC%9D%B4%EC%9D%98%ED%83%91/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%98%EB%85%B8%EC%9D%B4%EC%9D%98%ED%83%91/</guid>
      <pubDate>Wed, 27 Nov 2019 01:21:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12946&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12946" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><h2 id="swift"><a class="markdownIt-Anchor" href="#swift"></a> Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n:Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">    <span class="keyword">var</span> hanoiArray: [[<span class="type">Int</span>]] = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hanoi</span><span class="params">(<span class="number">_</span> n: Int, <span class="number">_</span> from: Int, <span class="number">_</span> by: Int, <span class="number">_</span> to: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(from)에서 \(by)로 \(n)번째 원반 이동"</span>)</span><br><span class="line">        hanoiArray.append([from,to])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        hanoi(n-<span class="number">1</span>, from,to,by)</span><br><span class="line">        hanoi(<span class="number">1</span>, from,by,to)</span><br><span class="line">        hanoi(n-<span class="number">1</span>, by,from,to)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hanoiArray</span><br><span class="line">&#125;   </span><br><span class="line">    <span class="keyword">return</span> hanoi(n,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span><span class="params">(n, from_, by_, to_)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print(from_, <span class="string">"-&gt;"</span>, to_)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    hanoi(n <span class="number">-1</span>, from_, to_, by_)</span><br><span class="line">    hanoi(<span class="number">1</span>,from_,by_,to_)</span><br><span class="line">    hanoi(n<span class="number">-1</span>,by_,from_,to_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hanoi(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2><p>하노이의 탑을 재귀로 풀어 보았는데<br />이해가 잘 되지 않아서</p><blockquote><p>(<s>모르면 외운다</s>)</p></blockquote><p>Swift코드를 Python으로 바꾸어<br /><a href="http://pythontutor.com/visualize.html#mode=display" target="_blank" rel="noopener">파이썬 튜터</a>사이트를 통해 viisualize 시킨 후 확인했다.</p><p>재귀함수를 사용하여 풀었고 코드를 시각화해서 보니 이해하기가 한결 편했다.</p><p><code>원반 3개 기준</code></p><ol><li>1번 기둥에 있는 2개(n-1)의 원반을 2번 기둥으로 옮긴다.</li></ol><blockquote><p>from -&gt; by로 옮긴다.</p><blockquote><p>(1 -&gt; 3) -&gt; (1 -&gt; 2) -&gt; (3 -&gt; 2)</p></blockquote></blockquote><ol start="2"><li>1번 기둥에 남아있는 큰 원반을 3번 기둥으로 옮긴다.</li></ol><blockquote><p>1.의 과정을 모두 거치면 1번 기둥에는 <strong>가장 큰</strong>원반만 남아 있다.</p><blockquote><p>(1 -&gt; 3)</p></blockquote></blockquote><ol start="3"><li>2번 기둥에 있는 원반을(2개) 3번 기둥으로 옮긴다.</li></ol><blockquote><p>by -&gt; to로 옮긴다.</p><blockquote><p>(2 -&gt; 1) -&gt; (2 -&gt; 3) -&gt; (1 -&gt; 3)</p></blockquote></blockquote><p>1층 : 1번 옮기면 끝</p><p>2층: 3번 옮기면 끝</p><p>3층 :  7번 옮기면 끝</p><p>n층 : 2^n -1번 옮기면 끝</p><p>시간 복잡도는 2^n -1번 이지만<br />상수는 시간복잡도에서 의미가 없기 때문에 O(2^n)이 된다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%98%EB%85%B8%EC%9D%B4%EC%9D%98%ED%83%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]핸드폰 번호 가리기</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%B8%EB%93%9C%ED%8F%B0-%EB%B2%88%ED%98%B8-%EA%B0%80%EB%A6%AC%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%B8%EB%93%9C%ED%8F%B0-%EB%B2%88%ED%98%B8-%EA%B0%80%EB%A6%AC%EA%B8%B0/</guid>
      <pubDate>Tue, 26 Nov 2019 01:08:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12948&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12948" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> phone_number:String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resultString = <span class="type">String</span>(repeating: <span class="string">"*"</span>,<span class="built_in">count</span>: phone_number.<span class="built_in">count</span>-<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">let</span> index = phone_number.index(phone_number.endIndex, offsetBy: -<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">let</span> mySubstring = phone_number[index...]</span><br><span class="line">    <span class="keyword">return</span> resultString + mySubstring</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>문제에 뒷자리 4자리를 제외한 나머지를 <strong><code>*</code></strong> 로 치환하라는 문제였다.</p><p>전체 문자열 중 뒤의 4자리를 제외한 만큼의 <strong><code>*</code></strong> 이 찍힌 문자열을 만들고</p><p>가장 마지막 4자리를 slicing하여 뽑아내고 합쳐서 리턴 해주면 된다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%B8%EB%93%9C%ED%8F%B0-%EB%B2%88%ED%98%B8-%EA%B0%80%EB%A6%AC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]멀리뛰기</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/</guid>
      <pubDate>Mon, 25 Nov 2019 01:21:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12914&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12914" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><ol><li>배열로 풀기</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n:Int)</span></span> -&gt; <span class="type">Int64</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fiboArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">        fiboArray.append((fiboArray[i] + fiboArray[i+<span class="number">1</span>]) % <span class="number">1234567</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int64</span>(fiboArray[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>스왑</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n:Int)</span></span> -&gt; <span class="type">Int64</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int64</span>(n) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">        temp = a + b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp % <span class="number">1234567</span></span><br><span class="line">        <span class="built_in">print</span>(temp,a,b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int64</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h1><p>처음에 문제를 풀기 위해 경우의 수를 막 적어보다가<br />문제의 해답이 피보나치 수열이라는것을 알았다.</p><p>나같은 사람들의 문제는 <strong><code>피보나치는 재귀로 풀어야해</code></strong> 라는 개념에 갇혀버려서 재귀로 풀려고 하는 것이다.</p><p>사실 재귀가 코드만 짧지 효율이 좋다고 보기가 어렵다.</p><p>어쨋든 해당 문제를 재귀함수로 만들어 풀어보려고 하니<br />이상한 에러메시지를 뿜어내고 실행조차 되지가 않았다.</p><p>그래서 for문을돌아 결과값들을 스왑하는 방식으로 변경해서 풀어보니 이번에는 실행이 되었다.</p><p>다만 코드를 제출하면 특정 테스트케이스부터 똑같은 에러 메시지를 뿜어내면서 실패를 해버렸다.<br />Swift도 처음 써봐서 문법이 틀렸나하고 문법을 뜯어 고치는 엉뚱한 삽질을 했다.</p><p>하나씩 값을 넣어보며 몇부터 실패를 하는지 찾다가 92번부터 실행이 안되더라.</p><p>계산되는 값을 찍어보니 <strong>숫자가 어마어마하게 크다</strong>는걸 확인했다.</p><p>피보나치를 그냥 재귀로 풀면 된다고만 알았지 정작 출력되는 값들을 본적이 없다는게 생각났다.</p><p>Swift의 <code>Int</code>타입이 담을 수 없는크기의 값이 와서 박살이 난다는걸 알았고, 문제에 1234567을 나누라는게 뭔 의미가 있나 했더니 이러한 문제를 해결하기 위한 방법이었다.</p><p>많은것을 느낀 문제였다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 과제 풀이 9</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-9/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-9/</guid>
      <pubDate>Sun, 24 Nov 2019 13:28:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;UISwitch, UISegmentedControl 을 이용한 문제&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;UISwitch
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><ol><li>UISwitch, UISegmentedControl 을 이용한 문제</li></ol><ul><li>UISwitch : On, Off 가 바뀔 때마다 Label 의 내용이 On, Off 로 표시되도록 구현</li><li>UISegmentedControl : 선택 내용이 바뀔 때마다 Label 의 내용도 해당 타이틀 값으로 함께 변경되도록 구현</li></ul><h1 id="코드"><a class="markdownIt-Anchor" href="#코드"></a> 코드</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> itemArray: [<span class="type">String</span>] = [<span class="string">"홍삼"</span>,<span class="string">"Python"</span>,<span class="string">"Django"</span>,<span class="string">"iOS"</span>,<span class="string">"Swift"</span>]</span><br><span class="line">    <span class="keyword">let</span> resultLabel = <span class="type">UILabel</span>()</span><br><span class="line">    <span class="keyword">let</span> toggle = <span class="type">UISwitch</span>()</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> segControl = <span class="type">UISegmentedControl</span>(items: itemArray)</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> superViewHeight = view.frame.size.height</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> superViewWidth = view.frame.size.width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        initialResultLabel()</span><br><span class="line">        initialToggle()</span><br><span class="line">        initalSegControl()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initialResultLabel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        resultLabel.frame = <span class="type">CGRect</span>(x: superViewWidth/<span class="number">3</span>, y: superViewHeight - <span class="number">700</span>, width: superViewWidth/<span class="number">2</span>, height: <span class="number">100</span>)</span><br><span class="line">        resultLabel.text = <span class="type">String</span>(<span class="built_in">count</span>)</span><br><span class="line">        resultLabel.isHidden = <span class="literal">true</span></span><br><span class="line">        resultLabel.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">50</span>)</span><br><span class="line">        view.addSubview(resultLabel)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initalSegControl</span><span class="params">()</span></span> &#123;</span><br><span class="line">        segControl.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: superViewHeight - <span class="number">400</span>, width: superViewWidth, height: <span class="number">100</span>)</span><br><span class="line">        segControl.addTarget(<span class="keyword">self</span>,action: #selector(actionSegControl(<span class="number">_</span>:)), <span class="keyword">for</span>: .valueChanged)</span><br><span class="line">        view.addSubview(segControl)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initialToggle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        toggle.frame = <span class="type">CGRect</span>(x: <span class="number">200</span>, y: superViewHeight - <span class="number">500</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">        toggle.addTarget(<span class="keyword">self</span>,action: #selector(actionToggle(<span class="number">_</span>:)), <span class="keyword">for</span>: .valueChanged)</span><br><span class="line">        view.addSubview(toggle)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">actionSegControl</span><span class="params">(<span class="number">_</span> sender: UISegmentedControl)</span></span> &#123;</span><br><span class="line">        resultLabel.text = itemArray[sender.selectedSegmentIndex]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">actionAdd</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        resultLabel.text = <span class="type">String</span>(<span class="built_in">count</span>)</span><br><span class="line">        resultLabel.textColor = .systemBlue</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">actionToggle</span><span class="params">(<span class="number">_</span> sender: UISwitch)</span></span> &#123;</span><br><span class="line">        resultLabel.isHidden = !sender.isOn</span><br><span class="line">        <span class="built_in">print</span>(resultLabel.isHidden)</span><br><span class="line">        <span class="built_in">print</span>(superViewWidth)</span><br><span class="line">        <span class="built_in">print</span>(superViewHeight)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="스크린샷"><a class="markdownIt-Anchor" href="#스크린샷"></a> 스크린샷</h1><img src="/2019/11/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-9/result.png" class="" title="result">]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]가장큰 수</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%EA%B0%80%EC%9E%A5%ED%81%B0-%EC%88%98/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%EA%B0%80%EC%9E%A5%ED%81%B0-%EC%88%98/</guid>
      <pubDate>Sun, 24 Nov 2019 11:35:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42746#_=_&quot; t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42746#_=_" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> numbers:[Int])</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = numbers.<span class="built_in">map</span>(&#123; <span class="type">String</span>($<span class="number">0</span>) &#125;).sorted(by: &#123;$<span class="number">0</span> + $<span class="number">1</span> &gt; $<span class="number">1</span> + $<span class="number">0</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> result[<span class="number">0</span>] == <span class="string">"0"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.joined()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>맨 처음에 도통 어떻게 풀어야할지 감을 못잡아서<br />한참을 헤맸다.</p><p>그리고 우연히 610과 106중 누가크냐는 힌트를 받았고</p><p>소팅의 규칙을 재정립해서 풀면 할 수 있을것 같았다.</p><p>말이야 쉬웠지 어떻게 하는건지 찾느라 진짜 머리카락이 다 빠질뻔했다.</p><p>어찌어찌 다하고 나서 제출을 했더니 마지막 케이스에서 실패를 해버렸다.</p><p>보통 이런경우에는 문제가 가지고 있는 함정을 해결하지 못해 생기는 경우였다.</p><p>문제에 <strong>0 또는 양의정수</strong>라는것을 확인했고<br />0만 들어있는 배열을 넣고 테스트 해보니 “0000” 이런식의 값이 나왔다.</p><p>그래서 그 부분만 예외처리 해줬다.</p><p>진짜 너무 어려운 문제였다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%EA%B0%80%EC%9E%A5%ED%81%B0-%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]하샤드 수</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%98%EC%83%A4%EB%93%9C-%EC%88%98/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%98%EC%83%A4%EB%93%9C-%EC%88%98/</guid>
      <pubDate>Sun, 24 Nov 2019 11:26:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;하샤드 수 구하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하샤드 수 : 자연수 N의 각 자릿수 숫자의 합을 구한 뒤, 그 합한 숫자로 자기 자신이
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>하샤드 수 구하기</p><ul><li>하샤드 수 : 자연수 N의 각 자릿수 숫자의 합을 구한 뒤, 그 합한 숫자로 자기 자신이 나누어 떨어지는 수</li></ul><p>e.g. 18의 자릿수 합은 1 + 8 = 9 이고, 18은 9로 나누어 떨어지므로 하샤드 수.</p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> innerInput = input</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> innerInput != <span class="number">0</span> &#123;</span><br><span class="line">    result += innerInput%<span class="number">10</span></span><br><span class="line">    innerInput = innerInput/<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result / input == <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p><a href="https://hongdonghyun.github.io/2019/11/Swift-%EC%9E%85%EB%A0%A5%EB%B0%9B%EC%9D%80-%EC%88%AB%EC%9E%90%EC%9D%98-%EB%AA%A8%EB%93%A0%EC%9E%90%EB%A6%AC-%EC%88%AB%EC%9E%90-%ED%95%A9/">입력받은 숫자의 모든자리 합</a><br />해당 내용을 응용하면 금방 구현이 가능하다.</p><p>하샤드 수를 구하기 위해선 자릿수를 모두 더해줘야 하기 때문에<br />나온 결과에서 자기자신으로 나누어 떨어지는지 확인하면 된다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%ED%95%98%EC%83%A4%EB%93%9C-%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]입력받은 숫자의 모든자리 숫자 합</title>
      <link>http://hongdonghyun.github.io/2019/11/Swift-%EC%9E%85%EB%A0%A5%EB%B0%9B%EC%9D%80-%EC%88%AB%EC%9E%90%EC%9D%98-%EB%AA%A8%EB%93%A0%EC%9E%90%EB%A6%AC-%EC%88%AB%EC%9E%90-%ED%95%A9/</link>
      <guid>http://hongdonghyun.github.io/2019/11/Swift-%EC%9E%85%EB%A0%A5%EB%B0%9B%EC%9D%80-%EC%88%AB%EC%9E%90%EC%9D%98-%EB%AA%A8%EB%93%A0%EC%9E%90%EB%A6%AC-%EC%88%AB%EC%9E%90-%ED%95%A9/</guid>
      <pubDate>Sun, 24 Nov 2019 11:14:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;입력받은 숫자의 모든 자리 숫자 합계를 출력하기&lt;/p&gt;
&lt;p&gt;e.g.  123 -&amp;gt; 6 ,  5678 -&amp;gt; 26&lt;/p&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p>입력받은 숫자의 모든 자리 숫자 합계를 출력하기</p><p>e.g.  123 -&gt; 6 ,  5678 -&gt; 26</p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> input = input</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> input != <span class="number">0</span> &#123;</span><br><span class="line">    result += input%<span class="number">10</span></span><br><span class="line">    input = input/<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>입력받은 정수를 10으로 나머지 연산을 하게 되면<br />가장 마지막 자릿수가 나오게 되고</p><p>그 결과를 변수에 더해준다.</p><p>남은 수들을 계속해서 구해주어야 하기 때문에<br />10으로 나누기 연산을 하게되면 몫이 나오게 되고<br />이 과정에서 소수점으로 나오는 경우가 있다.</p><p>하지만 우리는 정수형이기 때문에 소수점은 알아서 탈락하게 되기 때문에 몫이 0이 아닐때까지 계속해서 연산해주면 원하는 결과값을 얻을 수 있다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/11/Swift-%EC%9E%85%EB%A0%A5%EB%B0%9B%EC%9D%80-%EC%88%AB%EC%9E%90%EC%9D%98-%EB%AA%A8%EB%93%A0%EC%9E%90%EB%A6%AC-%EC%88%AB%EC%9E%90-%ED%95%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
