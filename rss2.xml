<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hong3의 개발블로그</title>
    <link>http://hongdonghyun.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발을 잘하고 싶읍니다</description>
    <pubDate>Thu, 12 Dec 2019 13:15:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Swift 오토레이아웃</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</guid>
      <pubDate>Thu, 12 Dec 2019 12:39:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;frame-based-layout&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#frame-based-layout&quot;&gt;&lt;/a&gt; Frame Based Layout&lt;/h1&gt;
&lt;p&gt;프레임 기반의 프로프래밍 방식&lt;/p&gt;
&lt;ul
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="frame-based-layout"><a class="markdownIt-Anchor" href="#frame-based-layout"></a> Frame Based Layout</h1><p>프레임 기반의 프로프래밍 방식</p><ul><li>원점의 위치와 크기를 통해 영역 계산</li><li>가장 유연하며 빠른 성능</li><li>모든 뷰에 대해 개별적 설정,관리가 필요</li><li>동적인 변화에 대한 설계,디버그,유지보수등에 많은 시간을 투자</li></ul><h2 id="frame-based-layout-for-programmatically"><a class="markdownIt-Anchor" href="#frame-based-layout-for-programmatically"></a> Frame Based Layout for Programmatically</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> redView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> blueView = <span class="type">UIView</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        redView.backgroundColor = .systemRed</span><br><span class="line">        view.addSubview(redView)</span><br><span class="line">        blueView.backgroundColor = .systemIndigo</span><br><span class="line">        view.addSubview(blueView)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewSafeAreaInsetsDidChange</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setUpViewFrame()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpViewFrame</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> safeArea = view.safeAreaInsets</span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">20</span></span><br><span class="line">        <span class="keyword">let</span> padding: <span class="type">CGFloat</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">let</span> yOffset = safeArea.top + margin</span><br><span class="line">        <span class="keyword">let</span> safeAreaWidthOffset = safeArea.<span class="keyword">left</span> + safeArea.<span class="keyword">right</span></span><br><span class="line">        <span class="keyword">let</span> viewWidth = (view.frame.width - padding - safeAreaWidthOffset) / <span class="number">2</span> - margin</span><br><span class="line">        <span class="keyword">let</span> viewHeight = view.frame.height - yOffset - (safeArea.bottom + margin)</span><br><span class="line">        </span><br><span class="line">        redView.frame = <span class="type">CGRect</span>(</span><br><span class="line">            x: safeArea.<span class="keyword">left</span> + margin,</span><br><span class="line">            y: yOffset,</span><br><span class="line">            width: viewWidth,</span><br><span class="line">            height: viewHeight</span><br><span class="line">        )</span><br><span class="line">        blueView.frame = <span class="type">CGRect</span>(x: redView.frame.maxX + padding, y: yOffset, width: redView.bounds.width, height: redView.bounds.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="viewsafeareainsetsdidchange"><a class="markdownIt-Anchor" href="#viewsafeareainsetsdidchange"></a> ViewSafeAreaInsetsDidChange</h2><ul><li>뷰가 로드 될때 SafeArea의 크기를 얻는곳</li><li>해당 시점에 레이아웃을 그려줘야 safeArea의 크기를 얻을 수있으므로 해당타이밍에 UI를 그리는 부분을 수행해 주었다.</li></ul><h1 id="autolayout"><a class="markdownIt-Anchor" href="#autolayout"></a> AutoLayout</h1><p>제약 조건을 이용해 유저 인터페이스 정의<br />View간의 관계 설정을 통한 크기와 위치 계산<br />내/외부 변경사항에 동적으로 반응<br />Frame 기반에 비해 느린 성능</p><ul><li>뷰에 주어진 제약조건에 따라 뷰의 크기와 위치를 동적으로 계산해 배치하는 것</li><li>외부 또는 내부의 변화에 동적으로 반응하여 유저 인터페이스 구성</li></ul><h2 id="외적-변화-요소"><a class="markdownIt-Anchor" href="#외적-변화-요소"></a> 외적 변화 요소</h2><ul><li>서로 다른 기기 및 스크린 크기</li><li>기기 회전</li><li>iPad / iPhone등에서 split View</li></ul><h2 id="내적-변화-요소"><a class="markdownIt-Anchor" href="#내적-변화-요소"></a> 내적 변화 요소</h2><ul><li>앱에서 보여지는 컨텐츠의 변화</li><li>국제화 지원 (언어별 지원) -&gt; 글자의 길이가 변하거나, 날짜등</li><li>Dynamic Type지원 (글꼴 크기)</li></ul><h2 id="autolayout-for-programmatically"><a class="markdownIt-Anchor" href="#autolayout-for-programmatically"></a> AutoLayout for Programmatically</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> blackView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> greenView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> yellowView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> cyanView = <span class="type">UIView</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"><span class="comment">//      setUpViewAutoLayout()</span></span><br><span class="line">        setUpViewAutoLayoutPractice()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpViewAutoLayout</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> layoutGuide = view.safeAreaLayoutGuide</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">20</span></span><br><span class="line">        </span><br><span class="line">        redView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        redView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        redView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor,constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        redView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor,constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        redView.trailingAnchor.constraint(equalTo: blueView.leadingAnchor,constant: -<span class="number">10</span>).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        redView.widthAnchor.constraint(equalTo: blueView.widthAnchor, multiplier: <span class="number">1</span>).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        blueView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        blueView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        blueView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        blueView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">autoSize</span><span class="params">(origin: UIView,target: UIView)</span></span> &#123;</span><br><span class="line">        target.widthAnchor.constraint(equalTo: origin.widthAnchor, multiplier: <span class="number">1</span>).isActive = <span class="literal">true</span></span><br><span class="line">        target.heightAnchor.constraint(equalTo: origin.heightAnchor, multiplier: <span class="number">1</span>).isActive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpViewAutoLayoutPractice</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> views: [<span class="type">UIView</span>: <span class="type">UIColor</span>] = [blackView: .black, greenView: .green, yellowView: .systemYellow, cyanView: .cyan]</span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">let</span> layoutGuide = view.safeAreaLayoutGuide</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> views.keys &#123;</span><br><span class="line">            key.backgroundColor = views[key]</span><br><span class="line">            view.addSubview(key)</span><br><span class="line">            key.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 좌상</span></span><br><span class="line">        blackView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        blackView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        blackView.bottomAnchor.constraint(equalTo: yellowView.topAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//우상</span></span><br><span class="line">        greenView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        greenView.leadingAnchor.constraint(equalTo: blackView.trailingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        greenView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        greenView.bottomAnchor.constraint(equalTo: cyanView.topAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//좌하</span></span><br><span class="line">        yellowView.topAnchor.constraint(equalTo: blackView.bottomAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        yellowView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        yellowView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//우하</span></span><br><span class="line">        cyanView.leadingAnchor.constraint(equalTo: yellowView.trailingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        cyanView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        cyanView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        autoSize(origin: blackView, target: greenView)</span><br><span class="line">        autoSize(origin: blackView, target: yellowView)</span><br><span class="line">        autoSize(origin: blackView, target: cyanView)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h3><p>처음에는 오토레이아웃이 마음처럼 되지 않아 힘들었다.</p><p><code>setUpViewAutoLayout</code>함수는 두개의 <code>UIView</code>를 수평으로 두개를 그리는 함수이다.<br /><code>setUpViewAutoLayoutPractice</code>함수는 4개의 <code>UIView</code>를 동등한 크기를 잡아 4분면으로 뿌려주는 함수를 연습했다.</p><p>그저 4개의 뷰를 뿌려주기만 하는 코드인데 상당히 길어져 나름대로 중복코드를 제거해보려고 했지만<br />막상 뷰를 그리는부분은 최적화를 하기가 힘들어서 손을 대지못했다.</p><p>언젠가 현업에 가게된다면 해당 부분은 조금 더 고민을 해볼 여지가 있는문제로 남았다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]숫자야구</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC/</guid>
      <pubDate>Tue, 10 Dec 2019 01:55:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42841&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42841" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> baseball:[[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">123</span>...<span class="number">987</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> itos = <span class="type">String</span>(i)</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> itos[itos.startIndex] == itos[itos.index(after: itos.startIndex)] || itos[itos.startIndex] == itos[itos.index(before: itos.endIndex)] || itos[itos.index(after: itos.startIndex)] == itos[itos.index(before: itos.endIndex)] &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> itos.<span class="built_in">contains</span>(<span class="string">"0"</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> baseball &#123;</span><br><span class="line">            <span class="keyword">var</span> strike = <span class="number">0</span>, ball = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...<span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>...<span class="number">2</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> checkBaseball = <span class="type">String</span>(b[<span class="number">0</span>])</span><br><span class="line">                    <span class="keyword">let</span> jIndex = checkBaseball.index(checkBaseball.startIndex, offsetBy: j)</span><br><span class="line">                    <span class="keyword">let</span> kIndex = checkBaseball.index(checkBaseball.startIndex, offsetBy: k)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 스트라이크</span></span><br><span class="line">                    <span class="keyword">if</span> j == k &amp;&amp; itos[jIndex] == checkBaseball[kIndex] &#123;</span><br><span class="line">                        strike += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 볼                    </span></span><br><span class="line">                    <span class="keyword">if</span> j != k &amp;&amp; itos[jIndex] == checkBaseball[kIndex] &#123;</span><br><span class="line">                        ball += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> strike != b[<span class="number">1</span>] || ball != b[<span class="number">2</span>] &#123;</span><br><span class="line">                flag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            answer += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>해당문제는 완전탐색 카테고리에 있는 문제다.<br />뭔가 탐색에 더 나은방법이 있을까 해서 고민했지만 정말로 완전탐색을 해야하는 문제였다.</p><p>문제의 조건에 다음과 같은문구가 있다.</p><p><code>각자 서로 다른 1~9까지 3자리 임의의 숫자를 정한 뒤 서로에게 3자리의 숫자를 불러서 결과를 확인합니다.</code></p><p><strong>서로 다른 1~9까지의 3자리 임의의 숫자</strong></p><p>이말은 서로 정한 숫자가 중복되지 않고 0을 포함하지 않는다는 말이 된다.</p><p>또한, 3자리의 임의의 숫자중 가장 큰 수는 999다.<br />범위는 100~999이 될 수 있겠다.</p><p>조금 더 생각해보면 0과 숫자가 중복이 되지 않는다고 한다.<br />그렇다면 범위를 123 ~ 987까지 줄일수 있다.</p><blockquote><p>987인 경우는 999가 가장 큰 상황에서 중복을 허용하지 않는다는 전제조건이 있었으니<br />987이 가장큰 수가된다.</p></blockquote><p>그럼 123 ~ 987까지 전체 순회를 돌면서</p><p>주어진 경우의 수들에 모두 맞는 숫자를 뽑아내면 된다.</p><blockquote><p>항상 말은 쉽다.</p></blockquote><ol><li>가장 바깥의 순회는 123 ~ 987을 돈다.</li><li>숫자의 중복,0 포함의 경우는 순회를 건너뛴다.</li><li>주어진 경우의수를 순회한다.</li><li>바깥의 수와 주어진 수의 자릿수를 비교한다. (0:0,0:1,0:2,1:0,1:1,1:2) 이런순서로</li><li>자릿수가 같으면서 값이 같으면 스트라이크</li><li>자릿수가 다르지만 값이 같다면 볼</li><li>주어진 스트라이크,볼 카운트를 직접센 카운트와 비교</li><li>카운트(스트라이크,볼)가 하나라도 다르면 그건 다음번 수가 될 수 없다.</li><li>이런식으로 뽑아낸 모든 숫자들의 갯수를 리턴하면 된다.</li></ol>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 메모리</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC/</guid>
      <pubDate>Mon, 09 Dec 2019 04:26:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;memory-management&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#memory-management&quot;&gt;&lt;/a&gt; Memory Management&lt;/h1&gt;
&lt;h2 id=&quot;rc-reference-counting&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="memory-management"><a class="markdownIt-Anchor" href="#memory-management"></a> Memory Management</h1><h2 id="rc-reference-counting"><a class="markdownIt-Anchor" href="#rc-reference-counting"></a> RC (Reference Counting)</h2><ul><li>메모리를 할당하거나 메모리 포인터를 참조 할 때 레퍼런스 카운트를 증가</li><li>사용을 완료 하면 레퍼런스 카운트를 감소</li><li>RC가 0이 되면 메모리에서 해제된다.</li></ul><h2 id="mrc-manual-reference-counting"><a class="markdownIt-Anchor" href="#mrc-manual-reference-counting"></a> MRC (Manual Reference Counting)</h2><ul><li>Objective-C</li><li>MRR (Manual Retain-Release) 또는 MRC (Manual Referece Counting)</li><li>RC(Reference Counting)를 통해 메모리를 수동으로 관리하는 방식 retain / release / autorelease 등의 메모리 관리 코드를 직접 호출 개발자가 명시적으로 RC 를 증가시키고 감소시키는 작업 수행</li></ul><blockquote><p>사용자가 직접해야한다.</p><blockquote><p>카운트 할당과 해제는 균형이 맞아야 함</p><blockquote><p>alloc , retain 이 많을 경우는 Memory Leak 발생</p><blockquote><p>release 가 많을 경우 Dangling Pointer (허상, 고아) 발생</p></blockquote></blockquote></blockquote></blockquote><h2 id="arc"><a class="markdownIt-Anchor" href="#arc"></a> ARC</h2><ul><li>RC 자동 관리 방식 (WWDC 2011 발표)</li><li>컴파일러가 개발자를 대신하여 메모리 관리 코드를 적절한 위치에 자동으로 삽입</li><li>GC 처럼 런타임이 아닌 <strong>컴파일 단에서 처리</strong> (Heap 에 대한 스캔 불필요 / 앱 일시 정지 현상 없음)</li><li>메모리 관리 이슈를 줄이고 개발자가 코딩 자체에 집중할 수 있도록 함</li><li>ARC 는 클래스의 인스턴스에만 적용 (Class - Reference 타입 , Struct / Enum - Value 타입) 활성화된 참조카운트가 하나라도 있을 경우 메모리에서 해제 되지 않음<br />참조 타입</li><li>강한 참조 (Strong) : 기본값. 참조될 때마다 참조 카운트 1 증가</li><li>약한 참조 (Weak), 미소유 참조 (Unowned) : 참조 카운트를 증가시키지 않음 강한 순환 참조 (Strong Reference Cycles) 에 대한 주의 필요</li></ul><h3 id="증가가-일어나는-경우"><a class="markdownIt-Anchor" href="#증가가-일어나는-경우"></a> 증가가 일어나는 경우</h3><ul><li>인스턴스를 생성하고 변수에 할당하는 순간, 변수는 인스턴스를 참조하게 된다.</li><li>클래스 타입은 참조에 의한 전달이 일어나므로 해당 변수를 다른 변수에 할당하면 모두 같은 인스턴스를 참조하게 되어 참조 횟수가 증가</li></ul><h3 id="감소가-일어나는-경우"><a class="markdownIt-Anchor" href="#감소가-일어나는-경우"></a> 감소가 일어나는 경우</h3><ol><li>변수의 생명주기가 끝났을 때</li></ol><ul><li>함수나 클로저등의 <code>{}</code> 스코프를 벗어나면 해당 함수 또는 클로저의 변수들은 더이상 사용될 수 없으므로 RC가 감소하게 되고 메모리에서 해제 된다.</li></ul><ol start="2"><li>nil이 할당될 때</li></ol><ul><li>nil은 가르키는 값이 없다는 것을 표현하기 때문에 nil이 할당되면 RC가 감소하며 메모리에서 해제된다.</li></ul><ol start="3"><li>접근한 클래스의 인스턴스가 메모리에서 해제되는 경우(deinit)</li></ol><ul><li>클래스 인스턴스가 메모리에서 해제되면 클래스가 가지고 있는 정보들(프로퍼티를 포함한)이 메모리에서 해제된다.</li></ul><h3 id="strong"><a class="markdownIt-Anchor" href="#strong"></a> Strong</h3><ul><li><p>강한 참조 (Strong) : 기본값. 참조될 때마다 참조 카운트 1 증가</p><ul><li>객체에 접근 가능한 모든 연결을 끊었음에도 <a href="#strong-reference-cycles">순환 참조</a>로 인해<br />활성화된 참조 카운트가 남아 있어 메모리 누수(Memory Leak)가 발생하는 현상이 발생할 수 있다.</li></ul></li><li><p>앱의 실행이 느려지거나 오동작 또는 오류를 발생시키는 원인이 됨</p></li></ul><h3 id="strong-reference-cycles"><a class="markdownIt-Anchor" href="#strong-reference-cycles"></a> Strong Reference Cycles</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pet: <span class="type">Dog?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> owner: <span class="type">Person?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hong3: <span class="type">Person!</span> = <span class="type">Person</span>() <span class="comment">// Person RC 1</span></span><br><span class="line"><span class="keyword">var</span> bokgil: <span class="type">Dog!</span> = <span class="type">Dog</span>() <span class="comment">// Dog RC 1</span></span><br><span class="line"></span><br><span class="line">hong3.pet = bokgil <span class="comment">// Dog RC 2</span></span><br><span class="line">bokgil.owner = hong3 <span class="comment">// Person RC 2</span></span><br><span class="line"></span><br><span class="line">hong3 = <span class="literal">nil</span> <span class="comment">// Person RC 1</span></span><br><span class="line">bokgil = <span class="literal">nil</span> <span class="comment">// Dog RC 1</span></span><br></pre></td></tr></table></figure><p>해당 예시의 경우</p><ol><li><code>Person</code>,<code>Dog</code> 클래스를 인스턴스화 시키면서 RC가 1증가</li><li><code>hong3</code>,<code>bokgil</code>변수가 서로를 참조하게 되면서 RC가 1증가하여 총 2RC가 되었다.</li><li>클래스 인스턴스에 <code>nil</code>을 할당했지만 서로를 참조하면서 증가시킨 RC가 남아있어 메모리에서 해제될 수가 없다.</li></ol><p>위와 같은경우는 다음과 같은 release순서를 통해 메모리에서 해제 시킬 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hong3.pet = <span class="literal">nil</span></span><br><span class="line">bokgil.owner = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">hong3 = <span class="literal">nil</span></span><br><span class="line">bokgil = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>서로가 참조했던 프로퍼티에 <code>nil</code>을 할당해 메모리를 해제 후<br />클래스 인스턴스에 <code>nil</code>을 할당하여 메모리 해제가 가능해진다.</p><p><strong>지금은 코드가 간단해서 금방 했지만 코드가 길어진다면? 서비스의 크기가 커진다면?</strong><br />이러한 문제를 해결하기위해 <code>Weak</code>,<code>Unowned</code>등의 예약어를 제공한다.</p><h3 id="weak약한-참조unowned미소유-참조"><a class="markdownIt-Anchor" href="#weak약한-참조unowned미소유-참조"></a> Weak(약한 참조),Unowned(미소유 참조)</h3><p>접근 객체에 대하여 레퍼런스 카운트를 증가시키지 않는다.</p><ul><li>Weak: 참조하던 객체 해제 시 nil 값으로 변경 -&gt; Optional</li><li>Unowned: 접근 객체에 값이 항상 있다는것을 가정, 참조 객체 해제 시에도 기존 포인터 주소 유지</li></ul><blockquote><p>약한 참조와 달리 언래핑의 필요가 없음</p><blockquote><p>미소유 참조의 경우 항상 인스턴스가 참조 하고 있다는 확신이 있을때만 사용해야한다.<br />그렇지 않다면 크래시가 일어나도 앱이 꺼지는 충격적인 사태가 발생할 것이다.</p></blockquote></blockquote>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 클래스,구조체</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%A1%B0%EC%B2%B4/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%A1%B0%EC%B2%B4/</guid>
      <pubDate>Mon, 09 Dec 2019 04:12:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;클래스와-구조체&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#클래스와-구조체&quot;&gt;&lt;/a&gt; 클래스와 구조체&lt;/h1&gt;
&lt;h2 id=&quot;언제-클래스와-구조체를-써야할까&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="클래스와-구조체"><a class="markdownIt-Anchor" href="#클래스와-구조체"></a> 클래스와 구조체</h1><h2 id="언제-클래스와-구조체를-써야할까"><a class="markdownIt-Anchor" href="#언제-클래스와-구조체를-써야할까"></a> 언제 클래스와 구조체를 써야할까?</h2><p><strong>애플의 권장사항</strong></p><ul><li>구조체를 기본으로 사용으로 사용한다는 전제</li></ul><h3 id="구조체-사용을-권장할-때"><a class="markdownIt-Anchor" href="#구조체-사용을-권장할-때"></a> 구조체 사용을 권장할 때</h3><ul><li>연관된 간단한 값의 집합을 캡슐화 하는 것만이 목적일 때</li><li>캡슐화된 값이 참조되는 것보다 복사되는 것이 합당할 때</li><li>구조체에 저장된 프로퍼티가 값 타입이며 참조되는 것보다 복사되는 것이 합당할 때</li><li>다른 타입으로부터 상속받거나 자신이 상속될 필요가 없을 때</li></ul><h3 id="클래스를-사용해야-할-때"><a class="markdownIt-Anchor" href="#클래스를-사용해야-할-때"></a> 클래스를 사용해야 할 때</h3><ul><li>Objective-C와 호환성이 필요할 때</li><li>equality(동등성) 외에 identity(정체성, 동일성)를 제어해야 할 때</li><li>RC(Reference Counting)와 소멸자(deinitialization)가 필요할 때</li><li>값이 중앙에서 관리되고 공유되어야 할 때</li></ul><h2 id="공통점"><a class="markdownIt-Anchor" href="#공통점"></a> 공통점</h2><ul><li>값을 저장하기 위한 프로퍼티</li><li>기능을 제공하기 위한 메서드</li><li>초기 상태를 설정하기 위한 생성자</li><li>기본 구현에서 기능을 추가하기 위한 확장(Extension)</li><li>특정 값에 접근할 수 있는 첨자(Subscript)</li><li>특정한 기능을 수행하기 위한 프로토콜 채택</li><li>Upper Camel Case 사용</li></ul><h2 id="차이점"><a class="markdownIt-Anchor" href="#차이점"></a> 차이점</h2><ul><li>구조체는 값타입 (Value Type)</li><li>클래스는 참조타입 (Reference Type)</li></ul><h2 id="only-class"><a class="markdownIt-Anchor" href="#only-class"></a> Only Class</h2><ul><li>상속 (Inheritance)을 통해 다른 클래스의 특성을 이어받을 수 있다</li><li>해제함수(deinitializer)를 사용해 사용한 자원을 반환할 수 있다</li><li>참조 카운팅(Reference counting)을 통해 한 클래스 인스턴스를 여러 군데에서 참조(사용)할 수 있다</li></ul><h1 id="생성자-비교"><a class="markdownIt-Anchor" href="#생성자-비교"></a> 생성자 비교</h1><h2 id="저장-프로퍼티-중-일부에만-초기화-값이-있을-때"><a class="markdownIt-Anchor" href="#저장-프로퍼티-중-일부에만-초기화-값이-있을-때"></a> 저장 프로퍼티 중 일부에만 초기화 값이 있을 때</h2><h3 id="struct"><a class="markdownIt-Anchor" href="#struct"></a> struct</h3><ul><li>초기화 값이 없는 저장 프로퍼티에 대해서만 생성자로 전달</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserStruct3</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span> = <span class="string">"홍길동"</span></span><br><span class="line">  <span class="keyword">let</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userS3 = <span class="type">UserStruct3</span>(age: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="class"><a class="markdownIt-Anchor" href="#class"></a> class</h3><ul><li>저장 프로퍼티 중 하나라도 초기화 값이 없는 경우 생성자를 구현해야 함</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserClass3</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span> = <span class="string">"홍길동"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  let age: Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="프로퍼티-변경"><a class="markdownIt-Anchor" href="#프로퍼티-변경"></a> 프로퍼티 변경</h2><h3 id="struct-2"><a class="markdownIt-Anchor" href="#struct-2"></a> struct</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PointStruct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 프로퍼티 변경시 mutating사용</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">updateX</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.x = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 연산 프로퍼티의 setter는 기본적으로 mutating</span></span><br><span class="line">    <span class="keyword">var</span> updateProperty: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; x &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; x = newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="class-2"><a class="markdownIt-Anchor" href="#class-2"></a> class</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 클래스에서는 mutating을 사용하지 않는다.</span></span><br><span class="line">    <span class="comment">// 값타입일 경우 Mutating 사용</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateX</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.x = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="프로토콜-적용"><a class="markdownIt-Anchor" href="#프로토콜-적용"></a> 프로토콜 적용</h2><h3 id="struct-3"><a class="markdownIt-Anchor" href="#struct-3"></a> struct</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Mutate</span> </span>&#123;</span><br><span class="line">      <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mutatingUpdate</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PointStruct1</span>: <span class="title">Mutate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mutatingUpdate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.x = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%A1%B0%EC%B2%B4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift TypeCasting</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-TypeCasting/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-TypeCasting/</guid>
      <pubDate>Thu, 05 Dec 2019 12:06:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;type-check&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#type-check&quot;&gt;&lt;/a&gt; Type Check&lt;/h1&gt;
&lt;h2 id=&quot;타입확인-typeof&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="type-check"><a class="markdownIt-Anchor" href="#type-check"></a> Type Check</h1><h2 id="타입확인-typeof"><a class="markdownIt-Anchor" href="#타입확인-typeof"></a> 타입확인  - type(of: )</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyArr: [<span class="type">Any</span>] = [<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">"3"</span>]</span><br><span class="line">type(of: anyArr[<span class="number">0</span>])  -&gt; <span class="type">Int</span></span><br><span class="line">type(of: anyArr[<span class="number">1</span>]) -&gt; <span class="type">Dobule</span></span><br><span class="line">type(of: anyArr[<span class="number">2</span>]) -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure><h2 id="any-generic"><a class="markdownIt-Anchor" href="#any-generic"></a> Any, Generic</h2><h3 id="any"><a class="markdownIt-Anchor" href="#any"></a> Any</h3><p>무슨 타입이든지 담을 수 있는 타입</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Any</span></span><br><span class="line"><span class="keyword">let</span> anyArr: [<span class="type">Any</span>] = [<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">"3"</span>]</span><br><span class="line">type(of: anyArr[<span class="number">0</span>])</span><br><span class="line">type(of: anyArr[<span class="number">1</span>])</span><br><span class="line">type(of: anyArr[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="generic"><a class="markdownIt-Anchor" href="#generic"></a> Generic</h3><p>값이 들어오는 순간 타입을 결정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Generic</span><br><span class="line">func printGenericInfo&lt;T&gt;(_ value: T) &#123;</span><br><span class="line">  let types = type(of: value)</span><br><span class="line">  print(&quot;&apos;\(value)&apos; of type &apos;\(types)&apos;&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printGenericInfo(1)</span><br><span class="line">printGenericInfo(2.0)</span><br><span class="line">printGenericInfo(&quot;3&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>함수 파라미터의 T는 관용적인것이며 변경해서 사용 가능하다.<br />단, 입력받는 모든 파라미터의 타입은 동일해야한다.</p></blockquote><h2 id="타입비교-is"><a class="markdownIt-Anchor" href="#타입비교-is"></a> 타입비교 - is</h2><p>객체 is 객체의 타입 -&gt; Bool (true or false)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span></span><br><span class="line">number == <span class="number">1</span>    <span class="comment">// 값 비교</span></span><br><span class="line">number <span class="keyword">is</span> <span class="type">Int</span>  <span class="comment">// 타입 비교</span></span><br></pre></td></tr></table></figure><h3 id="상속관계-조회"><a class="markdownIt-Anchor" href="#상속관계-조회"></a> 상속관계 조회</h3><p><code>자식 클래스 is 부모 클래스</code> -&gt; <code>true</code><br /><code>부모 클래스 is 자식 클래스</code>  -&gt; <code>false</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"name"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baby</span>: <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> school: <span class="type">String</span> = <span class="string">"school"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniversityStudent</span>: <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> univName: <span class="type">String</span> = <span class="string">"Univ"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="type">Student</span>()</span><br><span class="line">student <span class="keyword">is</span> <span class="type">Human</span> -&gt; always <span class="literal">true</span></span><br><span class="line">student <span class="keyword">is</span> <span class="type">Baby</span> -&gt; always <span class="literal">false</span></span><br><span class="line">student <span class="keyword">is</span> <span class="type">Student</span> -&gt; always <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p><code>student</code>와 <code>baby</code>는 같은 부모를 상속받은 동등관계이다.</p></blockquote><h1 id="type-casting"><a class="markdownIt-Anchor" href="#type-casting"></a> Type Casting</h1><ul><li>as  : 타입 변환이 확실하게 가능한 경우(업캐스팅, 자기 자신 등) 에만 사용 가능. 그 외에는 컴파일 에러</li><li>as? : 강제 타입 변환 시도. 변환이 성공하면 Optional 값을 가지며, 실패 시에는 nil 반환</li><li>as! : 강제 타입 변환 시도. 성공 시 언래핑 된 값을 가지며, 실패 시 런타임 에러 발생</li></ul><h2 id="업캐스팅"><a class="markdownIt-Anchor" href="#업캐스팅"></a> 업캐스팅</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> color = <span class="type">UIColor</span>.black</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"draw shape"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cornerRadius = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> color: <span class="type">UIColor</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> .white &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"draw rect"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"draw triangle"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(rect <span class="keyword">as</span> <span class="type">Shape</span>)</span><br><span class="line">(rect <span class="keyword">as</span> <span class="type">Shape</span>).color</span><br><span class="line"></span><br><span class="line">(rect <span class="keyword">as</span> <span class="type">Rectangle</span>)</span><br><span class="line">(rect <span class="keyword">as</span> <span class="type">Rectangle</span>).color</span><br></pre></td></tr></table></figure><ul><li>상속 관계에 있는 자식 클래스가 부모 클래스로 형 변환하는 것</li><li>업캐스팅은 항상 성공하며 as 키워드를 사용</li></ul><blockquote><p>자기 자신에 대한 타입 캐스팅도 항상 성공하므로 as 키워드 사용</p></blockquote><h2 id="다운캐스팅"><a class="markdownIt-Anchor" href="#다운캐스팅"></a> 다운캐스팅</h2><ul><li>형제 클래스나 다른 서브 클래스 등 수퍼 클래스에서 파생된 각종 서브 클래스로의 타입 변환 의미</li><li>반드시 성공한다는 보장이 없으므로 옵셔널. as? 또는 as! 를 사용</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shapeRect: <span class="type">Shape</span> = <span class="type">Rectangle</span>()</span><br><span class="line"><span class="keyword">var</span> downcastedRect: <span class="type">Rectangle?</span> = <span class="type">Rectangle</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downcastedRect = shapeRect <span class="keyword">as</span> <span class="type">Rectangle</span> <span class="comment">// 실패</span></span><br><span class="line"></span><br><span class="line">downcastedRect = shapeRect <span class="keyword">as</span>? <span class="type">Rectangle</span>  <span class="comment">//</span></span><br><span class="line">downcastedRect = shapeRect <span class="keyword">as</span>! <span class="type">Rectangle</span>  <span class="comment">//</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-TypeCasting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 과제 풀이 10</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-10/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-10/</guid>
      <pubDate>Thu, 05 Dec 2019 11:25:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1번&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1번&quot;&gt;&lt;/a&gt; 1번&lt;/h1&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="1번"><a class="markdownIt-Anchor" href="#1번"></a> 1번</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoValues</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> task1: <span class="type">Any</span> = addTwoValues(a: <span class="number">2</span>, b: <span class="number">3</span>)</span><br><span class="line">위와 같이 정의된 변수 task1이 있을 때 다음의 더하기 연산이 제대로 동작하도록 할 것</span><br><span class="line">task1 + task1</span><br></pre></td></tr></table></figure><h2 id="1번-풀이"><a class="markdownIt-Anchor" href="#1번-풀이"></a> 1번 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoValues</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> task1: <span class="type">Any</span> = addTwoValues(a: <span class="number">2</span>, b: <span class="number">3</span>)</span><br><span class="line">((task1 <span class="keyword">as</span>? <span class="type">Int</span>) ?? <span class="number">0</span>) + (task1 <span class="keyword">as</span>! <span class="type">Int</span>)</span><br></pre></td></tr></table></figure><h1 id="2번"><a class="markdownIt-Anchor" href="#2번"></a> 2번</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">과제 1번에 이어 이번에는 위와 같이 정의된 task2 변수에 대해</span></span><br><span class="line"><span class="comment">두 변수의 더하기 연산이 제대로 동작하도록 할 것</span></span><br><span class="line"><span class="comment">(addTwoValues의 각 파라미터에는 원하는 값 입력)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="2번-풀이"><a class="markdownIt-Anchor" href="#2번-풀이"></a> 2번 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> task2: <span class="type">Any</span> = addTwoValues</span><br><span class="line"><span class="comment">//(task2 as! (Int,Int) -&gt; Int) (1,2) + (task2 as! (Int,Int) -&gt; Int) (1,2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> task = task2 <span class="keyword">as</span>? (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    task(<span class="number">1</span>,<span class="number">2</span>) + task(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3번"><a class="markdownIt-Anchor" href="#3번"></a> 3번</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> class Car &#123;&#125;</span></span><br><span class="line"><span class="comment"> let values: [Any] = [</span></span><br><span class="line"><span class="comment">   0,</span></span><br><span class="line"><span class="comment">   0.0,</span></span><br><span class="line"><span class="comment">   (2.0, Double.pi),</span></span><br><span class="line"><span class="comment">   Car(),</span></span><br><span class="line"><span class="comment">   &#123; (str: String) -&gt; Int in str.count &#125;</span></span><br><span class="line"><span class="comment"> ]</span></span><br><span class="line"><span class="comment"> 위 values 변수의 각 값을 switch 문과 타입캐스팅을 이용해 출력하기</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="3번풀이"><a class="markdownIt-Anchor" href="#3번풀이"></a> 3번풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> values: [<span class="type">Any</span>] = [</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0.0</span>,</span><br><span class="line">  (<span class="number">2.0</span>, <span class="type">Double</span>.pi),</span><br><span class="line">  <span class="type">Car</span>(),</span><br><span class="line">  &#123; (str: <span class="type">String</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> str.<span class="built_in">count</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> values &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> value &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> ((x <span class="keyword">as</span>? <span class="type">Int</span>) != <span class="literal">nil</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(x) is Int"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> ((x <span class="keyword">as</span>? <span class="type">Double</span>) != <span class="literal">nil</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(x) is Double"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> ((x <span class="keyword">as</span>? (<span class="type">Double</span>,<span class="type">Double</span>)) != <span class="literal">nil</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(x) is tuple"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> ((x <span class="keyword">as</span>? <span class="type">Car</span>) != <span class="literal">nil</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(x) is Car class"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> value <span class="keyword">where</span> ((value <span class="keyword">as</span>? (<span class="type">String</span>) -&gt; <span class="type">Int</span>) != <span class="literal">nil</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(value) is Closure"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Error type is\(type(of: value))"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4번"><a class="markdownIt-Anchor" href="#4번"></a> 4번</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - Vehicle 클래스에 지정 이니셜라이져(Designated Initializer) 추가</span></span><br></pre></td></tr></table></figure><h1 id="4번-풀이"><a class="markdownIt-Anchor" href="#4번-풀이"></a> 4번 풀이</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> maxSpeed: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, maxSpeed: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.maxSpeed = maxSpeed</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = <span class="string">"Benz"</span></span><br><span class="line">        <span class="keyword">self</span>.maxSpeed = <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5번"><a class="markdownIt-Anchor" href="#5번"></a> 5번</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - Car 클래스에 modelYear 또는 numberOfSeat가 0 이하일 때 nil을 반환하는 Failable Initializer 추가</span></span><br></pre></td></tr></table></figure><h2 id="5번-풀이"><a class="markdownIt-Anchor" href="#5번-풀이"></a> 5번 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car2</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modelYear: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> numberOfSeats: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>?(modelYear: <span class="type">Int</span>, numberOfSeat: <span class="type">Int</span>, name: <span class="type">String</span> = <span class="string">"Benz"</span>, maxSpeed: <span class="type">Int</span> = <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> modelYear &gt; <span class="number">0</span> , numberOfSeat &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.modelYear = modelYear</span><br><span class="line">        <span class="keyword">self</span>.numberOfSeats = numberOfSeat</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name,maxSpeed: maxSpeed)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6번"><a class="markdownIt-Anchor" href="#6번"></a> 6번</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - Bus 클래스에 지정 이니셜라이져를 추가하고, maxSpeed를 100으로 기본 할당해주는 편의 이니셜라이져 추가\</span></span><br></pre></td></tr></table></figure><h2 id="6번-풀이"><a class="markdownIt-Anchor" href="#6번-풀이"></a> 6번 풀이</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isDoubleDecker: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(isDoubleDecker: <span class="type">Bool</span>,name: <span class="type">String</span>, maxSpeed: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.isDoubleDecker = isDoubleDecker</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name, maxSpeed: maxSpeed)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(name: <span class="type">String</span>, isDoubleDecker:<span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(isDoubleDecker: isDoubleDecker, name: name, maxSpeed: <span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3~6-실행"><a class="markdownIt-Anchor" href="#3~6-실행"></a> 3~6 실행</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="type">Vehicle</span>()</span><br><span class="line"><span class="keyword">let</span> v2 = <span class="type">Vehicle</span>(name: <span class="string">"audi"</span>, maxSpeed: <span class="number">50</span>)</span><br><span class="line">v.name</span><br><span class="line">v2.name</span><br><span class="line">v.maxSpeed</span><br><span class="line">v2.maxSpeed</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">Car2</span>(modelYear: <span class="number">2019</span>, numberOfSeat: <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">c</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> c2 = <span class="type">Car2</span>(modelYear: <span class="number">2019</span>, numberOfSeat: <span class="number">2</span>) &#123;</span><br><span class="line">        c2.modelYear</span><br><span class="line">        c2.numberOfSeats</span><br><span class="line">        c2.name</span><br><span class="line">        c2.maxSpeed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Bus</span>(name: <span class="string">"Volvo"</span>,isDoubleDecker: <span class="literal">false</span>)</span><br><span class="line">b.name</span><br><span class="line">b.maxSpeed</span><br><span class="line">b.isDoubleDecker</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EA%B3%BC%EC%A0%9C-%ED%92%80%EC%9D%B4-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]예산</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%88%EC%82%B0/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%88%EC%82%B0/</guid>
      <pubDate>Wed, 04 Dec 2019 06:05:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12982&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12982" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> d:[Int], <span class="number">_</span> budget:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>, <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d.sorted() &#123;</span><br><span class="line">        result += i</span><br><span class="line">        <span class="keyword">if</span> result &lt;= budget &#123;</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>문제의 입출력 예시를 그대로 보고 풀려고하면 상당히 어려워 진다.</p><p>해당 문제는 수학적으로 접근해야할 필요가 있다.</p><p>문제의 핵심은 최대한 많은부서에 물품을 지원해라는 것이다.</p><p>입력값 d는 부서별 요구 금액이다.</p><p>최대한 많은부서에 물품을 지원하려면 요구금액이 가장 작은순서대로 예산을 소모하면 가장 많은 부서들을 지원해줄 수 있다.</p><p>그렇다면 신청금액은 오름차순으로 정렬하여 예산에 맞추어 지원을 해주면 된다.</p><p>생각의 흐름을 코드로 나타내는건 그다지 어렵지 않았다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%88%EC%82%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]체육복</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%B2%B4%EC%9C%A1%EB%B3%B5/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%B2%B4%EC%9C%A1%EB%B3%B5/</guid>
      <pubDate>Tue, 03 Dec 2019 01:20:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42862&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42862" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n: Int, <span class="number">_</span> lost: [Int], <span class="number">_</span> reserve: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> students = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lost &#123; students[i-<span class="number">1</span>] -= <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> reserve &#123; students[j-<span class="number">1</span>] += <span class="number">1</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (index, k) <span class="keyword">in</span> students.enumerated() &#123;</span><br><span class="line">        <span class="keyword">if</span> k == -<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; students[index-<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                students[index-<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">                students[index] += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; students.<span class="built_in">count</span> - <span class="number">1</span>) &amp;&amp; students[index + <span class="number">1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">                students[index + <span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">                students[index] += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> students.<span class="built_in">filter</span>&#123;$<span class="number">0</span> &gt;= <span class="number">0</span>&#125;.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>매개변수</p><ul><li>전체학생 수 n,</li><li>체육복 도난당한 학생배열 lost</li><li>여벌의 체육복이 있는 학생 배열 reserve</li></ul><p>먼저 학생들의 배열을 한데 뭉쳐서 줄을 세울 필요가 있다.</p><p><s>(그래야 보기가 좋음)</s></p><p>체육복이 있는 학생은 0<br />여벌이 있는학생은 1<br />도난당한 학생은 -1 로 만들어준다.</p><p>그 후 전체 학생들의 목록을 순회하면서<br />-1인 학생의 앞뒤로 1이 있는지 체크하여 빌려주게 하면 된다.</p><blockquote><p>배열의 제일 앞 학생과 뒤의학생의 경우를 조심하자.</p></blockquote><p>그리고 문제에 함정이 하나있다.<br />여벌의 체육복이 있는 학생도 도난을 당할 수 있다는 건데,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lost = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">reserve = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>이런식으로 여유분 목록과 잃어버린 사람의 목록에 같이 들어 있을수가 있다.</p><p>해당 부분을 잘 고민해서 풀면 쉽게 풀수 있다.</p><blockquote><p>물론 난 오래걸림</p></blockquote>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%B2%B4%EC%9C%A1%EB%B3%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]쇠막대기</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0/</guid>
      <pubDate>Mon, 02 Dec 2019 07:53:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42585&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42585" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> arrangement:String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> innerArray = <span class="type">Array</span>(arrangement)</span><br><span class="line">    <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (index,value) <span class="keyword">in</span> innerArray.enumerated() &#123;</span><br><span class="line">        <span class="keyword">if</span> value == <span class="string">"("</span> &#123;</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> innerArray[index-<span class="number">1</span>] == <span class="string">"("</span> &#123;</span><br><span class="line">                result += cnt</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>문제의 글이 너무 많아서 겁부터 난다.</p><p>해당 문제는 스택에 관련한 문제였다.</p><img src="/2019/12/Swift-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0/steel.png" class="" title="steel"><p><strong><code>(</code></strong>  가 push</p><p><strong><code>)</code></strong> 가 pop 이라고 생각하자.</p><p>왼쪽부터 보면<br /><code>push -&gt; pop -&gt; push -&gt; push -&gt; push -&gt; push -&gt; pop</code><br />여기 까지가 두번째 레이저 발사까지다.</p><p>스택에 적용시켜 계산을 해보면<br /><code>1 -&gt; 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 3</code></p><p>여기서 문제를 다시 살펴보자<br /><strong>여는 괄호와 닫는 괄호의 쌍</strong> 은 레이저 발사다.</p><p>레이저를 발사하면 쇠막대기가 잘린다.</p><p>(  (  (  <strong>( )</strong> 레이저 발사</p><blockquote><p>여기까지가 두번째 레이저다.</p></blockquote><p>스택에 3개가 남아 있으므로 3조각이 나온다.<br />세번째 레이저 또한 스택에 3개가 있으므로 3조각이 나온다.</p><p>그 다음번은 <strong>)</strong> 가 튀어나오니 다시 스택이 감소 된다.<br />하지만 레이저 발사는 아니지만 하나의 조각이 튀어나오게 된다.</p><p>위와같은 로직을 코드화 시키면 이 문제를 해결할 수 있다.</p><blockquote><p>말이야쉽다.</p></blockquote><p>해당 과정을 찾아내는건 어려웠지만 코드에 적용하는건 어렵지 않았다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]피보나치 수</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98/</guid>
      <pubDate>Mon, 02 Dec 2019 07:47:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12945?langua
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12945?language=swift" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="number">0</span>, f2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">2</span>...n &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = (f1 + f2) % <span class="number">1234567</span></span><br><span class="line">        f1 = f2</span><br><span class="line">        f2 = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>해당 문제는 재귀로 풀면 안된다.</p><p><s>(적어도 나는 그렇게 생각한다.)</s></p><p><a href="https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98" target="_blank" rel="noopener">메모이제이션</a> 방식을 사용하여 풀어야 한다.</p><p>왜냐하면 문제의 제한 사항에서</p><p><strong>n은 1이상, 100000이하인 자연수입니다.</strong></p><p>이라는 조건이 붙었기 때문에 재귀로 푸는순간 100% 터진다.</p><p>해당 부분만 알아낸다면 문제 자체의 난이도는 높지 않으니 금방 풀 수 있고,<br />어렵다면 코드도 올려놨으니 금방 이해할 수 있다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
