<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hong3의 개발블로그</title>
    <link>http://hongdonghyun.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발을 잘하고 싶읍니다</description>
    <pubDate>Wed, 08 Jan 2020 06:25:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Swift] 이상한 문자 만들기</title>
      <link>http://hongdonghyun.github.io/2020/01/Swift-%EC%9D%B4%EC%83%81%ED%95%9C-%EB%AC%B8%EC%9E%90-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2020/01/Swift-%EC%9D%B4%EC%83%81%ED%95%9C-%EB%AC%B8%EC%9E%90-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <pubDate>Wed, 08 Jan 2020 06:19:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12930&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12930" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Character</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isAlpha</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"a"</span>...<span class="string">"z"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"A"</span>...<span class="string">"Z"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> s:String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> answer: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">c</span>.isAlpha() &#123;</span><br><span class="line">            answer += <span class="built_in">count</span> % <span class="number">2</span> == <span class="number">0</span> ? <span class="built_in">c</span>.uppercased() : <span class="built_in">c</span>.lowercased()</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            answer += <span class="string">" "</span></span><br><span class="line">            <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>Character에 메서드를 추가해서 풀어보았다.</p><p>맨처음 생각난 풀이는 문자열을 공백기준으로 split하여 2중for문으로 푸는 방법이 생각났는데,</p><p>죽어도 2중for문은 쓰기 싫어서 고민을 한번해보았다.</p><p>extension으로 <code>isAlpha</code>라는 메서드를 만들어 해당 문자가 영어인지 판별 후</p><p>영어인 경우 문제의 조건에 따라 대문자 소문자로 변경해 결과값 문자열에 추가하고,</p><p>영어가 아닌경우를 공백으로 판단하여</p><blockquote><p>사실 이경우 특수기호,한글등이 하나라도 들어가 있다면 난장판이 되겠지만<br />문제의 조건이 알파벳을 대문자,소문자로 구분을 해야하기 때문에<br />알파벳, 공백이외의 문자는 들어오지 않을거라는 판단하에 진행하였다.</p></blockquote><p>공백을 결과값 문자열에 추가해주었다.</p><p>extension에 익숙하지 않았는데 생각보다 재미있게 풀어서 좋았다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/01/Swift-%EC%9D%B4%EC%83%81%ED%95%9C-%EB%AC%B8%EC%9E%90-%EB%A7%8C%EB%93%A4%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo 구글 애드센스(Adsense) 적용하기</title>
      <link>http://hongdonghyun.github.io/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 06 Jan 2020 07:42:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;hexo-시리즈-바로가기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hexo-시리즈-바로가기&quot;&gt;&lt;/a&gt; Hexo 시리즈 바로가기&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hongdonghyun
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="hexo-시리즈-바로가기"><a class="markdownIt-Anchor" href="#hexo-시리즈-바로가기"></a> Hexo 시리즈 바로가기</h1><ol><li><p><a href="https://hongdonghyun.github.io/2019/11/Hexo%EB%A1%9C%20Github%20Page%20%EB%A7%8C%EB%93%A4%EA%B8%B0/">Hexo로 Github Page 만들기</a></p></li><li><p><a href="https://hongdonghyun.github.io/2019/11/hexo-theme-%EC%84%A4%EC%A0%95/">Hexo 테마 설정하기</a></p></li><li><p><a href="https://hongdonghyun.github.io/2019/11/hexo-%EB%8C%93%EA%B8%80%EA%B3%B5%EA%B0%84-%EB%A7%8C%EB%93%A4%EA%B8%B0/">Hexo 댓글 만들기</a></p></li><li><p><a href="https://hongdonghyun.github.io/2019/11/Hexo-Google-Analytics-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/">구글 애널리틱스 연동하기</a></p></li><li><p><a href="https://hongdonghyun.github.io/2019/11/hexo-about-catregory-tags-%EB%AA%A9%EB%A1%9D-%EB%A7%8C%EB%93%A4%EA%B8%B0/">Hexo 메뉴 추가하기</a></p></li><li><p><a href="https://hongdonghyun.github.io/2019/11/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B0%A9%EB%AC%B8%EC%9E%90-%EC%B9%B4%EC%9A%B4%ED%8C%85%ED%95%98%EA%B8%B0/">블로그 방문자 카운팅</a></p></li><li><p><a href="https://hongdonghyun.github.io/2019/11/hexo-sitemap-robots-txt-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/">sitemap.xml, robots.txt 추가하기</a></p></li><li><p><a href="https://hongdonghyun.github.io/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/">Hexo 구글 애드센스(Adsense) 적용하기</a></p></li></ol><h1 id="hexo-google-adsense-적용하기"><a class="markdownIt-Anchor" href="#hexo-google-adsense-적용하기"></a> Hexo Google Adsense 적용하기</h1><p>블로그에 <a href="https://www.google.co.kr/intl/ko/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">구글 애드센스(Adsense)</a>를 적용하고 싶어졌다.</p><p>그래서 포스팅한다.</p><h2 id="google-adsense-홈페이지"><a class="markdownIt-Anchor" href="#google-adsense-홈페이지"></a> Google Adsense 홈페이지</h2><p><a href="https://www.google.co.kr/intl/ko/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">구글 애드센스(Adsense)</a></p><p>먼저 구글 애드센스에 가입을 해야한다.<br />당연히 구글계정이 필수이다.</p><p>구글 계정으로 로그인 후 애드센스 홈페이지에서 가입을 진행하면 되며</p><p>광고를 적용할 페이지를 구글측에서 검토를 진행한다.</p><p>며칠이상 걸릴수도 있다.</p><blockquote><p>저는 하루정도 걸렸습니다.</p></blockquote><p>가입 후 기다렸다가 승인이 나면 나머지 부분을 진행하시면 됩니다.<br />이때 집주소를 입력하셔야 합니다.<br />환급이나 기타등등의 서류가 온다고 하는데 저는 왔는지 모르겠네요.</p><h2 id="google-ad"><a class="markdownIt-Anchor" href="#google-ad"></a> Google Ad</h2><p>나는 <code>Hexo</code>를 사용하고 있고 <code>next</code>테마를 사용중이다.</p><p>그리고 광고가 게시물의 가장 하단에 붙길 원했다.</p><blockquote><p>구글에서 웹사이트를 분석해 가장 알맞은 위치에 광고를 넣게 할 수 있는데<br />나는 본문의 하단에 그냥 붙이기로 했다.</p></blockquote><img src="/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/google_adsense.png" class="" title="google_adsense"><blockquote><p>디스플레이 광고를 선택한다.</p></blockquote><img src="/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/google_adsense2.png" class="" title="google_adsense2"><p>그럼 다음과 같은 화면이 나오는데 노출될 위치를 고려하여 <code>사각형</code>,<code>수평형</code>,<code>수직형</code>등을 선택한다.</p><blockquote><p>저는 수평형을 선택했습니다.</p></blockquote><p>선택 후 광고의 이름을 지정하고 만들기를 누르면</p><img src="/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/google_adsense3.png" class="" title="google_adsense3"><p>이렇게 코드가 나오는데 해당 코드를 전부 복사해준다.</p><h2 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h2><p>이제 복사한 코드를 원하는 위치에 노출이 되게끔 해주어야하는데<br /><code>themes/여러분의 테마/</code>로 이동하게 되면 <code>layout</code>폴더가 존재한다.</p><img src="/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/google_adsense4.png" class="" title="google_adsense4"><p><code>layout</code>폴더로 이동 후 광고 스크립트들이 존재하게 될 폴더를 하나 만들어주자(ads라는 이름의 폴더)</p><blockquote><p>앞으로 광고스크립트는 여기다 몰아두도록 하자.</p></blockquote><img src="/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/google_adsense5.png" class="" title="google_adsense5"><blockquote><p>쿠팡도 예전에 해봤는데 도저히 수익이 날거같지 않아 포기했습니다.<br />쿠팡은 기회가 되면 따로 포스팅을…</p></blockquote><p>이렇게 폴더안에 복사한 스크립트를 .swig파일로 만들어 저장한다.</p><p>그리고 이제 위치하고 싶은 공간에 해당 스크립트를 호출해주면 된다.</p><h3 id="광고-적용하기-next기준"><a class="markdownIt-Anchor" href="#광고-적용하기-next기준"></a> 광고 적용하기 (next기준)</h3><h4 id="위치"><a class="markdownIt-Anchor" href="#위치"></a> 위치</h4><p><code>themes/여러분의 테마/layout/_macro/post.swig</code></p><h5 id="게시물-상단"><a class="markdownIt-Anchor" href="#게시물-상단"></a> 게시물 상단</h5><p>170번째 줄 근처</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">167     &#123;#################&#125;</span><br><span class="line">168     &#123;### POST BODY ###&#125;</span><br><span class="line">169     &#123;#################&#125;</span><br><span class="line">170     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-body&#123;%- if post.direction and post.direction.toLowerCase() === 'rtl' %&#125; rtl&#123;%- endif %&#125;"</span> <span class="attr">itemprop</span>=<span class="string">"articleBody    "</span>&gt;</span></span><br><span class="line">171        &#123;&#123; partial('ads/google_display.swig') &#125;&#125;  <span class="tag">&lt;<span class="name">-</span> 여기</span></span><br><span class="line"><span class="tag"><span class="attr">172</span>       &#123;# <span class="attr">Gallery</span> <span class="attr">support</span> #&#125;</span></span><br></pre></td></tr></table></figure><h5 id="게시물-하단"><a class="markdownIt-Anchor" href="#게시물-하단"></a> 게시물 하단</h5><p>210번째 줄 근처</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">209           <span class="comment">&lt;!--/noindex--&gt;</span></span></span><br><span class="line"><span class="xml">210         </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">211           </span><span class="template-variable">&#123;&#123; post.content &#125;&#125;</span></span><br><span class="line"><span class="xml">212         </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">213       </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">214         </span><span class="template-variable">&#123;&#123; post.content &#125;&#125;</span></span><br><span class="line"><span class="xml">215       </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">216     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">217     </span><span class="template-variable">&#123;&#123; partial('ads/google_display.swig') &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">-</span> 여기</span></span></span><br><span class="line"><span class="xml">218</span></span><br><span class="line"><span class="xml">219     </span><span class="comment">&#123;#####################&#125;</span></span><br><span class="line"><span class="xml">220     </span><span class="comment">&#123;### END POST BODY ###&#125;</span></span><br><span class="line"><span class="xml">221     </span><span class="comment">&#123;#####################&#125;</span></span><br></pre></td></tr></table></figure><p>여기까지하고 블로그를 다시 재배포 후 조금 기다리면 광고가 노출된다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/01/hexo-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-Adsense-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift] 수박수박수박수박수박수?</title>
      <link>http://hongdonghyun.github.io/2020/01/Swift-%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98/</link>
      <guid>http://hongdonghyun.github.io/2020/01/Swift-%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98/</guid>
      <pubDate>Mon, 06 Jan 2020 02:03:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12922?langua
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12922?language=swift" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n:Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(<span class="type">String</span>(repeating: <span class="string">"수박"</span>, <span class="built_in">count</span>: (n+<span class="number">1</span>) / <span class="number">2</span>).<span class="keyword">prefix</span>(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>Swift를 일주일 정도 사용하지 않았더니 완전 다 까먹어서 감을 끌어올리기위해 풀어보았다.</p><p>주어진 n값 만큼 <code>수</code>,<code>박</code>을 반복하게 하는 알고리즘이다.</p><p>문자열을 맨처음 <code>n+1</code>/2만큼 반복하게 하여 <code>수박수박</code>을 만들게하고</p><blockquote><p>문자열을 자를것이기 때문에 너무 많은 반복을 통해 문자열을 길게만들필요가 없다고 느껴져서 최소한의 수만큼 반복하게 만들었다.</p></blockquote><p>주어진 n만큼 잘라서 출력하게 만들었다.</p><p>다만 prefix를 사용하면 문자열이 <code>subString</code>타입으로 나오기 때문에 <code>String</code>으로 형변환을 해주었다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/01/Swift-%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98%EB%B0%95%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>트위치 채널 포인트 자동클릭</title>
      <link>http://hongdonghyun.github.io/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/</link>
      <guid>http://hongdonghyun.github.io/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/</guid>
      <pubDate>Sun, 05 Jan 2020 13:20:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;트위치&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#트위치&quot;&gt;&lt;/a&gt; 트위치&lt;/h2&gt;
&lt;p&gt;나는 트위치를 자주 즐겨 보는데,&lt;br /&gt;
최근 트위치에 채널 포인트라는 제도가 생겼다.&lt;/p&gt;
&lt;img src=&quot;/202
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="트위치"><a class="markdownIt-Anchor" href="#트위치"></a> 트위치</h2><p>나는 트위치를 자주 즐겨 보는데,<br />최근 트위치에 채널 포인트라는 제도가 생겼다.</p><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point.png" class="" title="channel_point"><blockquote><p>포인트를 소모하여 보상을 얻을 수 있다.<br />시간제한이 있는 구독자 전용 이모티콘이나 채팅에 하이라이팅 효과를 먹일수 있다.</p></blockquote><p>채널 포인트를 획득하는 방법은 이것저것 있지만 방송을 계속 시청하거나 15분 간격으로 나오는 버튼을 누르면 50포인트를 얻을 수 있다.</p><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point2.png" class="" title="channel_point2"><blockquote><p>저 버튼이다.</p></blockquote><p>해당버튼을 누르지 않아도 계속시청하면 많은 포인트를 쌓을 수 있지만<br />생각보다 저 버튼이 거슬린다.</p><p>그래서 저 버튼을 자동으로 누르게 할수는 없을까 고민을 하다가 트위치가 <a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>으로 만들었다는걸 어디서 들은것 같아 시도해보았다.</p><blockquote><p><a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>은<br />html,javascript로 데스크탑 앱을 만드는 오픈소스<br />슬랙, 디스코드등이 이걸로 만들어졌음</p></blockquote><p>웹의 언어를 기반으로 만들었으니 개발자도구를 열어서 내부구현을 확인할 수 있지 않을까 라는 생각으로 시도했고</p><p>내 생각은 적중했다.<br />Mac에서는 cmd + alt + i<br />Windows에서는 F12를 누르면 개발자도구가 뙇 하고 열린다.</p><blockquote><p>(크롬기준) 브라우저에서도 동일하다.<br />일렉트론은 크롬 개발자도구를 기본 내장한다고 한다.</p><blockquote><p>슬랙에서도 시도해보았으나 안열림<br />다른툴을 쓰면 열 수 있다고 하는데 그렇게까지 하고 싶진 않았다.</p></blockquote></blockquote><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point3.png" class="" title="channel_point3"><blockquote><p><a href="https://www.twitch.tv/hanryang1125" target="_blank" rel="noopener">풍월량</a>님 방송입니다.<br />문제 되면 글내림</p></blockquote><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point4.png" class="" title="channel_point4"><blockquote><p>이제 이 버튼을 찾아 클릭하게 만들어주면 된다.</p></blockquote><p>요소검사기를 통해 저 버튼을 누르면</p><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point5.png" class="" title="channel_point5"><p>이렇게 html코드를 친절히 확인할 수 있다.</p><p>저 버튼은 15분에 한번씩 뜨지만 난 버튼을 이제 10초에 한번씩 누르게 만들것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pointClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByClassName(<span class="string">"claimable-bonus__icon tw-flex"</span>)[<span class="number">0</span>].click()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"성공"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line">setInterval(pointClick,<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p>setInerval을 통해 10초에 한번씩 함수를 실행하게 만들고</p><p>함수 구현부분에서 클릭해야할 요소를 <code>getElementClassName</code>을 통해 찾아내고 클릭하게 만든다.</p><p>당연히 10초에 한번씩 함수가 동작하게 만들었으니<br />버튼이 없는데 버튼을 클릭하려고 시도할것이고 그렇게 되면 에러가 쌓인다.</p><p>try-catch문을 통해 에러 메시지가 쌓이지 않도록 처리해주었다.</p><p>이제 저 코드를 콘솔창에서 실행 시켜주면 끝난다.</p><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point6.png" class="" title="channel_point6"><p>이렇게 입력해주고 엔터를 누른후 10초 기다리면</p><img src="/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/channel_point7.png" class="" title="channel_point7"><p>성공이다.</p><h2 id="문제점"><a class="markdownIt-Anchor" href="#문제점"></a> 문제점</h2><p>이유는 알 수 없으나 개발자도구를 켜놓은 상태로 트위치를 사용하다보면 크래쉬 나면서 꺼지기도 한다.</p><p>당연하지만 트위치 데스크탑 앱이나 브라우저를 껏다키면 해당부분도 없어지니 매번 킬때마다 다시 입력해줘야한다.</p><p>나중에 이걸 크롬 익스텐션으로도 한번 만들어 보아야겠다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/01/%ED%8A%B8%EC%9C%84%EC%B9%98-%EC%B1%84%EB%84%90-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%81%B4%EB%A6%AD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 시험공부</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%8B%9C%ED%97%98%EA%B3%B5%EB%B6%80/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%8B%9C%ED%97%98%EA%B3%B5%EB%B6%80/</guid>
      <pubDate>Mon, 23 Dec 2019 11:53:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;delegate&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#delegate&quot;&gt;&lt;/a&gt; Delegate&lt;/h2&gt;
&lt;p&gt;위임하다, 대리자, 대표등의 뜻을 가지고 있다.&lt;/p&gt;
&lt;p&gt;델리게이트는 어떠한 객체가 처리해야할
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="delegate"><a class="markdownIt-Anchor" href="#delegate"></a> Delegate</h2><p>위임하다, 대리자, 대표등의 뜻을 가지고 있다.</p><p>델리게이트는 어떠한 객체가 처리해야할 일들중 일부를 다른객체에게 넘겨 처리를 하게끔 하는것</p><p>어떠한 일들을 처리해야할지는 프로토콜을 채택하여 정한다.</p><p><strong>대신 위임받아 처리해줄 객체</strong> <s>(ViewController)</s><br /><strong>처리를 요청하는 객체</strong> <s>(CustomView)</s><br />두가지를 기억하자.</p><h2 id="protocol"><a class="markdownIt-Anchor" href="#protocol"></a> Protocol</h2><p>약속, 규약</p><p>특정한 작업 또는 기능에 적합한 메소드, 프로퍼티등의 요구사항을 정의하는것</p><p>스위프트에서의 프로토콜은 <strong>정의</strong>만 하고,<br /><strong>구현</strong>은 프로토콜을 채택한 곳에서 진행하여야 한다.</p><blockquote><p>Delegate와 엮어서 이해하자.</p></blockquote><h2 id="singleton"><a class="markdownIt-Anchor" href="#singleton"></a> Singleton</h2><p>객체를 오직 하나만을 생성하여 생성된 객체를 어디서든 참조할 수 있도록 하는 패턴</p><h3 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h3><ul><li>메모리 낭비 방지</li><li>데이터를 공유할 수 있다는 이점</li></ul><h3 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h3><ul><li>종료될때까지 메모리에 상주 (Swift의 경우 앱이 죽을때까지라는 소리)</li><li>어디서나 쉽게 접근이 가능하기 때문에 스파게티 코드가 될 확률이 높아진다.</li></ul><h3 id="사용법"><a class="markdownIt-Anchor" href="#사용법"></a> 사용법</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Singleton</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>static변수 : 한번 선언되면 변수가 사용가능한 영역을 벗어나도 메모리에서 사라지지 않는 변수<br />lazy의 특성도 가지고 있다.</p></blockquote><h2 id="userdefault"><a class="markdownIt-Anchor" href="#userdefault"></a> UserDefault</h2><p>사용자의 정보(데이터)를 저장하기 위한 싱글톤 인스턴스<br />간단한 정보의 저장 및 불러오기가 가능</p><blockquote><p>대량,다량의 데이터를 저장하기 위해서는 데이터베이스를 쓰는게 낫다.</p></blockquote><h3 id="저장하기"><a class="markdownIt-Anchor" href="#저장하기"></a> 저장하기</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(<span class="string">"value"</span>, forkey: <span class="string">"key"</span>)</span><br></pre></td></tr></table></figure><h3 id="불러오기"><a class="markdownIt-Anchor" href="#불러오기"></a> 불러오기</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserDefaults</span>.standard.object(forkey: <span class="string">"key"</span>) <span class="comment">// Object</span></span><br><span class="line"><span class="type">UserDefaults</span>.standard.integer(forkey: <span class="string">"key"</span>) <span class="comment">// 정수</span></span><br><span class="line"><span class="type">UserDefaults</span>.standard.bool(forkey: <span class="string">"key"</span>) <span class="comment">// bool</span></span><br></pre></td></tr></table></figure><h2 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> Layout</h2><h3 id="frame-based-layout"><a class="markdownIt-Anchor" href="#frame-based-layout"></a> Frame Based Layout</h3><ol><li>원점의 위치와 크기를 지정하여 UI가 그려질 영역을 계산하는 방식</li><li>모든 View들에 대해 개별적인 설정과 관리가 필요</li><li>유연하며 빠른 성능</li><li>많은 리소스(노동)소모</li></ol><h3 id="autolayout"><a class="markdownIt-Anchor" href="#autolayout"></a> AutoLayout</h3><ol><li>View들간에 주어진 제약조건에 따라 View의 위치와 크기를 결정하는 Layout System</li><li>외부 혹은 내부의 변화(기기회전,텍스트 크기변화…등등)에 동적으로 반응하여 유저 인터페이스를 구성하는것</li><li>Frame 방식에 비하면 느림</li></ol><h3 id="autoresizingmask"><a class="markdownIt-Anchor" href="#autoresizingmask"></a> autoresizingMask</h3><p>슈퍼뷰(상위뷰)의 바운드가 변경되었을 대 자신의 크기를 어떻게 재조정 하는지를 결정짓는 정수형 비트 마스크</p><h2 id="arc-automatic-reference-counting"><a class="markdownIt-Anchor" href="#arc-automatic-reference-counting"></a> ARC (Automatic Reference Counting)</h2><p>컴파일 타임때 구문분석을 통해 메모리 관리 코드를 적절한 위치에 삽입</p><blockquote><p>런타임때는 별도의 메모리관리가 이루어 지지 않는다.</p><blockquote><p>GC는 런타임중 필요가 없다고 여겨지는 부분을 해제 시킨다는점에서 차이가 있다.</p></blockquote></blockquote><h3 id="strong"><a class="markdownIt-Anchor" href="#strong"></a> Strong</h3><p>강한 참조 (Strong) : 기본값. 참조될 때마다 참조 카운트 1 증가</p><h3 id="weak"><a class="markdownIt-Anchor" href="#weak"></a> Weak</h3><p>접근 객체에 대하여 레퍼런스 카운트를 증가시키지 않는다.<br />참조하던 객체 해제 시 nil 값으로 변경 -&gt; Optional</p><h3 id="unowned"><a class="markdownIt-Anchor" href="#unowned"></a> Unowned</h3><p>접근 객체에 대하여 레퍼런스 카운트를 증가시키지 않는다.<br />접근 객체에 값이 항상 있다는것을 가정, 참조 객체 해제 시에도 기존 포인터 주소 유지</p><h2 id="typecasting"><a class="markdownIt-Anchor" href="#typecasting"></a> TypeCasting</h2><p>타입 캐스팅은 인스턴스의 타입을 체크하거나,<br />해당 인스턴스를 고유한 클래스의 계층 구조의 다른 수퍼 클래스나 서브 클래스로 처리하는 방법</p><ul><li>as : 타입 변환이 확실하게 가능한 경우(업캐스팅, 자기 자신 등) 에만 사용 가능. 그 외에는 컴파일 에러</li><li>as? : 강제 타입 변환 시도. 변환이 성공하면 Optional 값을 가지며, 실패 시에는 nil 반환</li><li>as! : 강제 타입 변환 시도. 성공 시 언래핑 된 값을 가지며, 실패 시 런타임 에러 발생</li></ul><h3 id="업캐스팅"><a class="markdownIt-Anchor" href="#업캐스팅"></a> 업캐스팅</h3><p>상속 관계에 있는 자식 클래스가 부모 클래스로 형 변환하는 것</p><h3 id="다운캐스팅"><a class="markdownIt-Anchor" href="#다운캐스팅"></a> 다운캐스팅</h3><p>형제 클래스나 다른 서브 클래스 등 수퍼 클래스에서 파생된 각종 서브 클래스로의 타입 변환 의미</p><h3 id="any"><a class="markdownIt-Anchor" href="#any"></a> Any</h3><p>어떠한 타입이든 담을수 있다.</p><h3 id="generic"><a class="markdownIt-Anchor" href="#generic"></a> Generic</h3><p>값이 들어오는순간 타입을 정한다.</p><h2 id="initializer"><a class="markdownIt-Anchor" href="#initializer"></a> Initializer</h2><p>객체를 사용하기전 객체 안 모든 저장 프로퍼티에 초기화를 필수로 진행해야한다.</p><ol><li>초기값을 넣거나</li><li>옵셔널 타입으로 선언하거나</li><li>이외의 경우 init메서드 안에서 설정한다.</li></ol><h3 id="designated-initializer-init"><a class="markdownIt-Anchor" href="#designated-initializer-init"></a> Designated Initializer( ==  init)</h3><p>클래스에 하나이상 필요<br />초기화 과정에서 반드시 한번은 호출된다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someText: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> someInt: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(text: <span class="type">String</span>, someInt: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.someText = text</span><br><span class="line">        <span class="keyword">self</span>.someInt = someInt</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(text: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.someText = text</span><br><span class="line">        <span class="keyword">self</span>.someInt = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(someInt: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.someText = <span class="string">"hello world"</span></span><br><span class="line">        <span class="keyword">self</span>.someInt = someInt</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="convenience-initializer"><a class="markdownIt-Anchor" href="#convenience-initializer"></a> Convenience Initializer</h3><p>단독으로 초기화 할 수 없고<br />파라미터 일부만 생성을 진행하고 나머지 부분은 다른생성자에게 위임하는 생성자</p><p><strong>중복코드를 제거하기 위해서 사용</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someText: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> someInt: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> someBool: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(text: <span class="type">String</span>, someInt: <span class="type">Int</span>, someBool: <span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.someText = text</span><br><span class="line">        <span class="keyword">self</span>.someInt = someInt</span><br><span class="line">        <span class="keyword">self</span>.someBool = someBool</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(text: <span class="type">String</span>, someBool: <span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.someText = text</span><br><span class="line">        <span class="keyword">self</span>.someBool = someBool</span><br><span class="line">        <span class="keyword">self</span>.someInt = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(someBool: <span class="type">Bool</span>, someInt: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(text: <span class="string">"hello world"</span>, someInt: someInt, someBool: someBool)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="failable-initializer"><a class="markdownIt-Anchor" href="#failable-initializer"></a> Failable Initializer</h3><p>class, struct, enum등을 정의할 때 초기화 중 실패할 가능성이 있는경우 사용</p><p>초기화 성공시 옵셔널타입을 반환<br />실패시에는 nil을 반환하도록 init을 작성해야한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> age: <span class="type">Int</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>?(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> age &gt; <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="keyword">self</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%8B%9C%ED%97%98%EA%B3%B5%EB%B6%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]프린터</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%ED%94%84%EB%A6%B0%ED%84%B0/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%ED%94%84%EB%A6%B0%ED%84%B0/</guid>
      <pubDate>Tue, 17 Dec 2019 13:47:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42587&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42587" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> priorities:[Int], <span class="number">_</span> location:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _return: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> indexingArray: [[<span class="type">Int</span>]] = [], resultArray: [[<span class="type">Int</span>]] = []</span><br><span class="line">    <span class="keyword">for</span> (index, p) <span class="keyword">in</span> priorities.enumerated() &#123; indexingArray.append([p,index]) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> !indexingArray.isEmpty &#123;</span><br><span class="line">        <span class="keyword">let</span> firstPop = indexingArray.remove(at: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> <span class="type">PArray</span>: [<span class="type">Int</span>] = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> indexingArray &#123; <span class="type">PArray</span>.append(i[<span class="number">0</span>]) &#125;</span><br><span class="line">        <span class="keyword">let</span> maxP = !<span class="type">PArray</span>.isEmpty ? <span class="type">PArray</span>.<span class="built_in">max</span>()! : firstPop[<span class="number">0</span>]</span><br><span class="line">        firstPop[<span class="number">0</span>] &gt;= maxP ? resultArray.append(firstPop) : indexingArray.append(firstPop)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (index, result) <span class="keyword">in</span> resultArray.enumerated() &#123;</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">1</span>] == location &#123;</span><br><span class="line">            _return = index + <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>큐를 사용하는 문제다.<br />문제가 큐라는것을 알았지만 정작 풀때 어떻게 써야할지 몰라 고민을 많이 했던 문제다.</p><p>입력으로 들어온 배열은 순회하면서 가장큰값이 앞으로 나오고 작은값은 뒤로가게 해서<br />주어진 location과 같은 값을 출력하는 문제다.</p><p>1.주어진 배열을 먼저 index값을 포함하여 이중배열로 만든다.<br />2. 2중배열에 값이 없을때 까지 순회를 돈다.<br />3. 2중배열의 가장 첫번째 값을 꺼낸다. (Dequeue)<br />4. 2중배열의 우선순위 값만 다시 배열로 만든다.<br />5. 우선순위 배열의 가장 큰 값을 꺼낸다.<br />6. POP한 우선순위와 우선순위배열의 가장 큰값과 비교하여 POP 크다면 새로운 배열에 append 아니라면 이중배열의 가장뒤쪽으로 보낸다 (Enqueue)<br />7. 1 ~ 6 과정을 이중배열이 없을때 까지 반복<br />8. 결과배열을 순회하여 index값과 location을 비교하여 같은경우 index에 +1한 값을 출력해주면 된다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%ED%94%84%EB%A6%B0%ED%84%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift UITableView</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-UITableView/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-UITableView/</guid>
      <pubDate>Tue, 17 Dec 2019 04:05:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;uitableview&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#uitableview&quot;&gt;&lt;/a&gt; UITableView&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;UIScrollView 를 상속받아 리스트 형태로 반복되는 아이템을 보
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="uitableview"><a class="markdownIt-Anchor" href="#uitableview"></a> UITableView</h1><ul><li>UIScrollView 를 상속받아 리스트 형태로 반복되는 아이템을 보여주기 위한 뷰 Plain</li></ul><blockquote><p>상당수의 앱이 TableView로 만들어졌다.</p></blockquote><h2 id="plain-table-views"><a class="markdownIt-Anchor" href="#plain-table-views"></a> Plain Table Views</h2><ul><li>기본 스타일</li><li>하나 이상의 섹션을 가질 수 있으며 각 섹션은 다시 하나 이상의 로우를 가짐</li><li>각 섹션은 그 자신의 헤더/푸터 뷰를 가질 수 있고 해당 섹션이 보여질 때 헤더뷰는 Top, 푸터뷰는 Bottom 에 고정</li><li>섹션을 빠르게 검색할 수 있도록 Indexed List 를 설정 가능</li></ul><h2 id="grouped-table-views"><a class="markdownIt-Anchor" href="#grouped-table-views"></a> Grouped Table Views</h2><ul><li>관련된 아이템들을 하나의 그룹으로 그룹핑</li><li>데이터 계층 구조에 대한 상세 정보를 표현 하는 데 적합한 형태</li><li>Plain 스타일과 달리 헤더뷰와 푸터뷰가 Top, Bottom 에 고정되지 않음</li></ul><h2 id="필수구현-프로토콜"><a class="markdownIt-Anchor" href="#필수구현-프로토콜"></a> 필수구현 프로토콜</h2><h3 id="uitableviewdatasource"><a class="markdownIt-Anchor" href="#uitableviewdatasource"></a> UITableViewDataSource</h3><p>TableView 에서 표현할 데이터를 제공하는 데 사용하는 프로토콜</p><h2 id="거의-필수"><a class="markdownIt-Anchor" href="#거의-필수"></a> 거의 필수</h2><h3 id="uitableviewdelegate"><a class="markdownIt-Anchor" href="#uitableviewdelegate"></a> UITableViewDelegate</h3><p>Interaction(상호작용) 과 관련된 동작을 커스터마이징하는 프로토콜</p><h1 id="uitableviewcell"><a class="markdownIt-Anchor" href="#uitableviewcell"></a> UITableViewCell</h1><ul><li>TableView 에서 사용하는 각 아이템을 담는 컨테이너</li><li>반복되는 셀을 매번 생성, 해제, 재할당하는 부담을 덜기 위해 화면에 보여지지 않는 부분의 셀을 재사용</li></ul><blockquote><p>DequeueReusableCell로 시작하는 메서드로 사용한다.</p><blockquote><p>Enqueue도 있다.</p></blockquote></blockquote><h2 id="cell-style"><a class="markdownIt-Anchor" href="#cell-style"></a> Cell Style</h2><h3 id="기본스타일"><a class="markdownIt-Anchor" href="#기본스타일"></a> 기본스타일</h3><ul><li>default</li><li>subtitle</li><li>value 1</li><li>value 2</li></ul><h3 id="customcell"><a class="markdownIt-Anchor" href="#customcell"></a> CustomCell</h3><h2 id="uitableviewcell-영역"><a class="markdownIt-Anchor" href="#uitableviewcell-영역"></a> UITableViewCell 영역</h2>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-UITableView/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 오토레이아웃</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</guid>
      <pubDate>Thu, 12 Dec 2019 12:39:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;frame-based-layout&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#frame-based-layout&quot;&gt;&lt;/a&gt; Frame Based Layout&lt;/h1&gt;
&lt;p&gt;프레임 기반의 프로프래밍 방식&lt;/p&gt;
&lt;ul
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="frame-based-layout"><a class="markdownIt-Anchor" href="#frame-based-layout"></a> Frame Based Layout</h1><p>프레임 기반의 프로프래밍 방식</p><ul><li>원점의 위치와 크기를 통해 영역 계산</li><li>가장 유연하며 빠른 성능</li><li>모든 뷰에 대해 개별적 설정,관리가 필요</li><li>동적인 변화에 대한 설계,디버그,유지보수등에 많은 시간을 투자</li></ul><h2 id="frame-based-layout-for-programmatically"><a class="markdownIt-Anchor" href="#frame-based-layout-for-programmatically"></a> Frame Based Layout for Programmatically</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> redView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> blueView = <span class="type">UIView</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        redView.backgroundColor = .systemRed</span><br><span class="line">        view.addSubview(redView)</span><br><span class="line">        blueView.backgroundColor = .systemIndigo</span><br><span class="line">        view.addSubview(blueView)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewSafeAreaInsetsDidChange</span><span class="params">()</span></span> &#123;</span><br><span class="line">        setUpViewFrame()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpViewFrame</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> safeArea = view.safeAreaInsets</span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">20</span></span><br><span class="line">        <span class="keyword">let</span> padding: <span class="type">CGFloat</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">let</span> yOffset = safeArea.top + margin</span><br><span class="line">        <span class="keyword">let</span> safeAreaWidthOffset = safeArea.<span class="keyword">left</span> + safeArea.<span class="keyword">right</span></span><br><span class="line">        <span class="keyword">let</span> viewWidth = (view.frame.width - padding - safeAreaWidthOffset) / <span class="number">2</span> - margin</span><br><span class="line">        <span class="keyword">let</span> viewHeight = view.frame.height - yOffset - (safeArea.bottom + margin)</span><br><span class="line">        </span><br><span class="line">        redView.frame = <span class="type">CGRect</span>(</span><br><span class="line">            x: safeArea.<span class="keyword">left</span> + margin,</span><br><span class="line">            y: yOffset,</span><br><span class="line">            width: viewWidth,</span><br><span class="line">            height: viewHeight</span><br><span class="line">        )</span><br><span class="line">        blueView.frame = <span class="type">CGRect</span>(x: redView.frame.maxX + padding, y: yOffset, width: redView.bounds.width, height: redView.bounds.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="viewsafeareainsetsdidchange"><a class="markdownIt-Anchor" href="#viewsafeareainsetsdidchange"></a> ViewSafeAreaInsetsDidChange</h2><ul><li>뷰가 로드 될때 SafeArea의 크기를 얻는곳</li><li>해당 시점에 레이아웃을 그려줘야 safeArea의 크기를 얻을 수있으므로 해당타이밍에 UI를 그리는 부분을 수행해 주었다.</li></ul><h1 id="autolayout"><a class="markdownIt-Anchor" href="#autolayout"></a> AutoLayout</h1><p>제약 조건을 이용해 유저 인터페이스 정의<br />View간의 관계 설정을 통한 크기와 위치 계산<br />내/외부 변경사항에 동적으로 반응<br />Frame 기반에 비해 느린 성능</p><ul><li>뷰에 주어진 제약조건에 따라 뷰의 크기와 위치를 동적으로 계산해 배치하는 것</li><li>외부 또는 내부의 변화에 동적으로 반응하여 유저 인터페이스 구성</li></ul><h2 id="외적-변화-요소"><a class="markdownIt-Anchor" href="#외적-변화-요소"></a> 외적 변화 요소</h2><ul><li>서로 다른 기기 및 스크린 크기</li><li>기기 회전</li><li>iPad / iPhone등에서 split View</li></ul><h2 id="내적-변화-요소"><a class="markdownIt-Anchor" href="#내적-변화-요소"></a> 내적 변화 요소</h2><ul><li>앱에서 보여지는 컨텐츠의 변화</li><li>국제화 지원 (언어별 지원) -&gt; 글자의 길이가 변하거나, 날짜등</li><li>Dynamic Type지원 (글꼴 크기)</li></ul><h2 id="autolayout-for-programmatically"><a class="markdownIt-Anchor" href="#autolayout-for-programmatically"></a> AutoLayout for Programmatically</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> blackView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> greenView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> yellowView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> cyanView = <span class="type">UIView</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"><span class="comment">//      setUpViewAutoLayout()</span></span><br><span class="line">        setUpViewAutoLayoutPractice()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpViewAutoLayout</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> layoutGuide = view.safeAreaLayoutGuide</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">20</span></span><br><span class="line">        </span><br><span class="line">        redView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        redView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        redView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor,constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        redView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor,constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        redView.trailingAnchor.constraint(equalTo: blueView.leadingAnchor,constant: -<span class="number">10</span>).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        redView.widthAnchor.constraint(equalTo: blueView.widthAnchor, multiplier: <span class="number">1</span>).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        blueView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        blueView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        blueView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        blueView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">autoSize</span><span class="params">(origin: UIView, target: UIView)</span></span> &#123;</span><br><span class="line">        target.widthAnchor.constraint(equalTo: origin.widthAnchor, multiplier: <span class="number">1</span>).isActive = <span class="literal">true</span></span><br><span class="line">        target.heightAnchor.constraint(equalTo: origin.heightAnchor, multiplier: <span class="number">1</span>).isActive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUpViewAutoLayoutPractice</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> views: [<span class="type">UIView</span>: <span class="type">UIColor</span>] = [blackView: .black, greenView: .green, yellowView: .systemYellow, cyanView: .cyan]</span><br><span class="line">        <span class="keyword">let</span> margin: <span class="type">CGFloat</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">let</span> layoutGuide = view.safeAreaLayoutGuide</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> views.keys &#123;</span><br><span class="line">            key.backgroundColor = views[key]</span><br><span class="line">            view.addSubview(key)</span><br><span class="line">            key.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 좌상</span></span><br><span class="line">        blackView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        blackView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        blackView.bottomAnchor.constraint(equalTo: yellowView.topAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//우상</span></span><br><span class="line">        greenView.topAnchor.constraint(equalTo: layoutGuide.topAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        greenView.leadingAnchor.constraint(equalTo: blackView.trailingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        greenView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        greenView.bottomAnchor.constraint(equalTo: cyanView.topAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//좌하</span></span><br><span class="line">        yellowView.topAnchor.constraint(equalTo: blackView.bottomAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        yellowView.leadingAnchor.constraint(equalTo: layoutGuide.leadingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        yellowView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//우하</span></span><br><span class="line">        cyanView.leadingAnchor.constraint(equalTo: yellowView.trailingAnchor, constant: margin).isActive = <span class="literal">true</span></span><br><span class="line">        cyanView.trailingAnchor.constraint(equalTo: layoutGuide.trailingAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        cyanView.bottomAnchor.constraint(equalTo: layoutGuide.bottomAnchor, constant: -margin).isActive = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        autoSize(origin: blackView, target: greenView)</span><br><span class="line">        autoSize(origin: blackView, target: yellowView)</span><br><span class="line">        autoSize(origin: blackView, target: cyanView)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="리뷰"><a class="markdownIt-Anchor" href="#리뷰"></a> 리뷰</h2><p>처음에는 오토레이아웃이 마음처럼 되지 않아 힘들었다.</p><p><code>setUpViewAutoLayout</code>함수는 두개의 <code>UIView</code>를 수평으로 두개를 그리는 함수이다.<br /><code>setUpViewAutoLayoutPractice</code>함수는 4개의 <code>UIView</code>를 동등한 크기를 잡아 4분면으로 뿌려주는 함수를 연습했다.</p><p>그저 4개의 뷰를 뿌려주기만 하는 코드인데 상당히 길어져 나름대로 중복코드를 제거해보려고 했지만<br />막상 뷰를 그리는부분은 최적화를 하기가 힘들어서 손을 대지못했다.</p><p>언젠가 현업에 가게된다면 해당 부분은 조금 더 고민을 해볼 여지가 있는문제로 남았다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Swift]숫자야구</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC/</guid>
      <pubDate>Tue, 10 Dec 2019 01:55:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42841&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42841" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> baseball:[[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">123</span>...<span class="number">987</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> itos = <span class="type">String</span>(i)</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> itos[itos.startIndex] == itos[itos.index(after: itos.startIndex)] || itos[itos.startIndex] == itos[itos.index(before: itos.endIndex)] || itos[itos.index(after: itos.startIndex)] == itos[itos.index(before: itos.endIndex)] &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> itos.<span class="built_in">contains</span>(<span class="string">"0"</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> baseball &#123;</span><br><span class="line">            <span class="keyword">var</span> strike = <span class="number">0</span>, ball = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...<span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>...<span class="number">2</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> checkBaseball = <span class="type">String</span>(b[<span class="number">0</span>])</span><br><span class="line">                    <span class="keyword">let</span> jIndex = checkBaseball.index(checkBaseball.startIndex, offsetBy: j)</span><br><span class="line">                    <span class="keyword">let</span> kIndex = checkBaseball.index(checkBaseball.startIndex, offsetBy: k)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 스트라이크</span></span><br><span class="line">                    <span class="keyword">if</span> j == k &amp;&amp; itos[jIndex] == checkBaseball[kIndex] &#123;</span><br><span class="line">                        strike += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 볼                    </span></span><br><span class="line">                    <span class="keyword">if</span> j != k &amp;&amp; itos[jIndex] == checkBaseball[kIndex] &#123;</span><br><span class="line">                        ball += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> strike != b[<span class="number">1</span>] || ball != b[<span class="number">2</span>] &#123;</span><br><span class="line">                flag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            answer += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>해당문제는 완전탐색 카테고리에 있는 문제다.<br />뭔가 탐색에 더 나은방법이 있을까 해서 고민했지만 정말로 완전탐색을 해야하는 문제였다.</p><p>문제의 조건에 다음과 같은문구가 있다.</p><p><code>각자 서로 다른 1~9까지 3자리 임의의 숫자를 정한 뒤 서로에게 3자리의 숫자를 불러서 결과를 확인합니다.</code></p><p><strong>서로 다른 1~9까지의 3자리 임의의 숫자</strong></p><p>이말은 서로 정한 숫자가 중복되지 않고 0을 포함하지 않는다는 말이 된다.</p><p>또한, 3자리의 임의의 숫자중 가장 큰 수는 999다.<br />범위는 100~999이 될 수 있겠다.</p><p>조금 더 생각해보면 0과 숫자가 중복이 되지 않는다고 한다.<br />그렇다면 범위를 123 ~ 987까지 줄일수 있다.</p><blockquote><p>987인 경우는 999가 가장 큰 상황에서 중복을 허용하지 않는다는 전제조건이 있었으니<br />987이 가장큰 수가된다.</p></blockquote><p>그럼 123 ~ 987까지 전체 순회를 돌면서</p><p>주어진 경우의 수들에 모두 맞는 숫자를 뽑아내면 된다.</p><blockquote><p>항상 말은 쉽다.</p></blockquote><h1 id="순서"><a class="markdownIt-Anchor" href="#순서"></a> 순서</h1><ol><li>가장 바깥의 순회는 123 ~ 987을 돈다.</li><li>숫자의 중복,0 포함의 경우는 순회를 건너뛴다.</li><li>주어진 경우의수를 순회한다.</li><li>바깥의 수와 주어진 수의 자릿수를 비교한다. (0:0,0:1,0:2,1:0,1:1,1:2) 이런순서로</li><li>자릿수가 같으면서 값이 같으면 스트라이크</li><li>자릿수가 다르지만 값이 같다면 볼</li><li>주어진 스트라이크,볼 카운트를 직접센 카운트와 비교</li><li>카운트(스트라이크,볼)가 하나라도 다르면 그건 다음번 수가 될 수 없다.</li><li>이런식으로 뽑아낸 모든 숫자들의 갯수를 리턴하면 된다.</li></ol>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 메모리</title>
      <link>http://hongdonghyun.github.io/2019/12/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC/</link>
      <guid>http://hongdonghyun.github.io/2019/12/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC/</guid>
      <pubDate>Mon, 09 Dec 2019 04:26:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;memory-management&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#memory-management&quot;&gt;&lt;/a&gt; Memory Management&lt;/h1&gt;
&lt;h2 id=&quot;rc-reference-counting&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="memory-management"><a class="markdownIt-Anchor" href="#memory-management"></a> Memory Management</h1><h2 id="rc-reference-counting"><a class="markdownIt-Anchor" href="#rc-reference-counting"></a> RC (Reference Counting)</h2><ul><li>메모리를 할당하거나 메모리 포인터를 참조 할 때 레퍼런스 카운트를 증가</li><li>사용을 완료 하면 레퍼런스 카운트를 감소</li><li>RC가 0이 되면 메모리에서 해제된다.</li></ul><h2 id="mrc-manual-reference-counting"><a class="markdownIt-Anchor" href="#mrc-manual-reference-counting"></a> MRC (Manual Reference Counting)</h2><ul><li>Objective-C</li><li>MRR (Manual Retain-Release) 또는 MRC (Manual Referece Counting)</li><li>RC(Reference Counting)를 통해 메모리를 수동으로 관리하는 방식 retain / release / autorelease 등의 메모리 관리 코드를 직접 호출 개발자가 명시적으로 RC 를 증가시키고 감소시키는 작업 수행</li></ul><blockquote><p>사용자가 직접해야한다.</p><blockquote><p>카운트 할당과 해제는 균형이 맞아야 함</p><blockquote><p>alloc , retain 이 많을 경우는 Memory Leak 발생</p><blockquote><p>release 가 많을 경우 Dangling Pointer (허상, 고아) 발생</p></blockquote></blockquote></blockquote></blockquote><h2 id="arc-automatic-reference-counting"><a class="markdownIt-Anchor" href="#arc-automatic-reference-counting"></a> ARC (Automatic Reference Counting)</h2><ul><li>RC 자동 관리 방식 (WWDC 2011 발표)</li><li>컴파일러가 개발자를 대신하여 메모리 관리 코드를 적절한 위치에 자동으로 삽입</li><li>GC 처럼 런타임이 아닌 <strong>컴파일 단에서 처리</strong> (Heap 에 대한 스캔 불필요 / 앱 일시 정지 현상 없음)</li><li>메모리 관리 이슈를 줄이고 개발자가 코딩 자체에 집중할 수 있도록 함</li><li>ARC 는 클래스의 인스턴스에만 적용 (Class - Reference 타입 , Struct / Enum - Value 타입) 활성화된 참조카운트가 하나라도 있을 경우 메모리에서 해제 되지 않음<br />참조 타입</li><li>강한 참조 (Strong) : 기본값. 참조될 때마다 참조 카운트 1 증가</li><li>약한 참조 (Weak), 미소유 참조 (Unowned) : 참조 카운트를 증가시키지 않음 강한 순환 참조 (Strong Reference Cycles) 에 대한 주의 필요</li></ul><h3 id="증가가-일어나는-경우"><a class="markdownIt-Anchor" href="#증가가-일어나는-경우"></a> 증가가 일어나는 경우</h3><ul><li>인스턴스를 생성하고 변수에 할당하는 순간, 변수는 인스턴스를 참조하게 된다.</li><li>클래스 타입은 참조에 의한 전달이 일어나므로 해당 변수를 다른 변수에 할당하면 모두 같은 인스턴스를 참조하게 되어 참조 횟수가 증가</li></ul><h3 id="감소가-일어나는-경우"><a class="markdownIt-Anchor" href="#감소가-일어나는-경우"></a> 감소가 일어나는 경우</h3><ol><li>변수의 생명주기가 끝났을 때</li></ol><ul><li>함수나 클로저등의 <code>{}</code> 스코프를 벗어나면 해당 함수 또는 클로저의 변수들은 더이상 사용될 수 없으므로 RC가 감소하게 되고 메모리에서 해제 된다.</li></ul><ol start="2"><li>nil이 할당될 때</li></ol><ul><li>nil은 가르키는 값이 없다는 것을 표현하기 때문에 nil이 할당되면 RC가 감소하며 메모리에서 해제된다.</li></ul><ol start="3"><li>접근한 클래스의 인스턴스가 메모리에서 해제되는 경우(deinit)</li></ol><ul><li>클래스 인스턴스가 메모리에서 해제되면 클래스가 가지고 있는 정보들(프로퍼티를 포함한)이 메모리에서 해제된다.</li></ul><h3 id="strong"><a class="markdownIt-Anchor" href="#strong"></a> Strong</h3><ul><li><p>강한 참조 (Strong) : 기본값. 참조될 때마다 참조 카운트 1 증가</p><ul><li>객체에 접근 가능한 모든 연결을 끊었음에도 <a href="#strong-reference-cycles">순환 참조</a>로 인해<br />활성화된 참조 카운트가 남아 있어 메모리 누수(Memory Leak)가 발생하는 현상이 발생할 수 있다.</li></ul></li><li><p>앱의 실행이 느려지거나 오동작 또는 오류를 발생시키는 원인이 됨</p></li></ul><h3 id="strong-reference-cycles"><a class="markdownIt-Anchor" href="#strong-reference-cycles"></a> Strong Reference Cycles</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pet: <span class="type">Dog?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> owner: <span class="type">Person?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hong3: <span class="type">Person!</span> = <span class="type">Person</span>() <span class="comment">// Person RC 1</span></span><br><span class="line"><span class="keyword">var</span> bokgil: <span class="type">Dog!</span> = <span class="type">Dog</span>() <span class="comment">// Dog RC 1</span></span><br><span class="line"></span><br><span class="line">hong3.pet = bokgil <span class="comment">// Dog RC 2</span></span><br><span class="line">bokgil.owner = hong3 <span class="comment">// Person RC 2</span></span><br><span class="line"></span><br><span class="line">hong3 = <span class="literal">nil</span> <span class="comment">// Person RC 1</span></span><br><span class="line">bokgil = <span class="literal">nil</span> <span class="comment">// Dog RC 1</span></span><br></pre></td></tr></table></figure><p>해당 예시의 경우</p><ol><li><code>Person</code>,<code>Dog</code> 클래스를 인스턴스화 시키면서 RC가 1증가</li><li><code>hong3</code>,<code>bokgil</code>변수가 서로를 참조하게 되면서 RC가 1증가하여 총 2RC가 되었다.</li><li>클래스 인스턴스에 <code>nil</code>을 할당했지만 서로를 참조하면서 증가시킨 RC가 남아있어 메모리에서 해제될 수가 없다.</li></ol><p>위와 같은경우는 다음과 같은 release순서를 통해 메모리에서 해제 시킬 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hong3.pet = <span class="literal">nil</span></span><br><span class="line">bokgil.owner = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">hong3 = <span class="literal">nil</span></span><br><span class="line">bokgil = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>서로가 참조했던 프로퍼티에 <code>nil</code>을 할당해 메모리를 해제 후<br />클래스 인스턴스에 <code>nil</code>을 할당하여 메모리 해제가 가능해진다.</p><p><strong>지금은 코드가 간단해서 금방 했지만 코드가 길어진다면? 서비스의 크기가 커진다면?</strong><br />이러한 문제를 해결하기위해 <code>Weak</code>,<code>Unowned</code>등의 예약어를 제공한다.</p><h3 id="weak약한-참조unowned미소유-참조"><a class="markdownIt-Anchor" href="#weak약한-참조unowned미소유-참조"></a> Weak(약한 참조),Unowned(미소유 참조)</h3><p>접근 객체에 대하여 레퍼런스 카운트를 증가시키지 않는다.</p><ul><li>Weak: 참조하던 객체 해제 시 nil 값으로 변경 -&gt; Optional</li><li>Unowned: 접근 객체에 값이 항상 있다는것을 가정, 참조 객체 해제 시에도 기존 포인터 주소 유지</li></ul><blockquote><p>약한 참조와 달리 언래핑의 필요가 없음</p><blockquote><p>미소유 참조의 경우 항상 인스턴스가 참조 하고 있다는 확신이 있을때만 사용해야한다.<br />그렇지 않다면 크래시가 일어나고 앱이 꺼지는 충격적인 사태가 발생할 것이다.</p></blockquote></blockquote>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2019/12/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
