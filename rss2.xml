<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hong3의 개발블로그</title>
    <link>http://hongdonghyun.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발을 잘하고 싶읍니다</description>
    <pubDate>Mon, 01 Jun 2020 07:32:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Swift-크레인 인형뽑기 게임</title>
      <link>http://hongdonghyun.github.io/2020/06/Swift-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/</link>
      <guid>http://hongdonghyun.github.io/2020/06/Swift-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/</guid>
      <pubDate>Mon, 01 Jun 2020 07:29:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/64061&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/64061" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> board:[[Int]], <span class="number">_</span> moves:[Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> board = board</span><br><span class="line">    <span class="keyword">var</span> resultStack: [<span class="type">Int</span>] = []</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    moves.forEach &#123; move <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> correctedMoved = move - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> cursor <span class="keyword">in</span> <span class="number">0</span>..&lt;board.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> doll = board[cursor][correctedMoved]</span><br><span class="line">            <span class="keyword">guard</span> doll != <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">            board[cursor][correctedMoved] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> resultStack.last == doll &#123;</span><br><span class="line">                resultStack.removeLast()</span><br><span class="line">                result += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; resultStack.append(doll) &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>스택을 활용하여 푸는 문제다.<br />현재 인형들의 위치정보가 2차원 배열에 담겨져 오고<br />뽑은 인형들을 스택에 담으면 된다.</p><p>지문이 길어 겁이 나지만 실제로는 레벨1에 해당하는 쉬운편의 문제였다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/06/Swift-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift-주식가격</title>
      <link>http://hongdonghyun.github.io/2020/05/Swift-%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9/</link>
      <guid>http://hongdonghyun.github.io/2020/05/Swift-%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9/</guid>
      <pubDate>Wed, 27 May 2020 07:24:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42584&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42584" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><h2 id="swift"><a class="markdownIt-Anchor" href="#swift"></a> Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(prices: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> priceLength = prices.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">var</span> answer = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: priceLength)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;priceLength &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>+i..&lt;priceLength &#123;</span><br><span class="line">            answer[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> prices[i] &gt; prices[j] &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(prices: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> priceLength = prices.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">var</span> answer = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: priceLength)</span><br><span class="line">    <span class="keyword">var</span> stack = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;priceLength &#123;</span><br><span class="line">        <span class="keyword">if</span> prices[i] &lt; prices[stack.last!] &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> stack.reversed() &#123;</span><br><span class="line">                <span class="keyword">if</span> prices[i] &lt; prices[j] &#123;</span><br><span class="line">                    answer[j] = i - j</span><br><span class="line">                    stack.remove(at: j)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.append(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;stack.<span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">        answer[stack[i]] = priceLength - stack[i] - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(prices)</span>:</span></span><br><span class="line">    price_length = len(prices)</span><br><span class="line">    answer = [<span class="number">0</span>] * price_length</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(price_length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, price_length):</span><br><span class="line">            answer[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> prices[i] &gt; prices[j]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">solution([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(prices)</span>:</span></span><br><span class="line">    price_length = len(prices)</span><br><span class="line">    answer = [<span class="number">0</span>] * price_length</span><br><span class="line">    stack = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, price_length):</span><br><span class="line">        <span class="keyword">if</span> prices[i] &lt; prices[stack[<span class="number">-1</span>]]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> stack[::<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">if</span> prices[i] &lt; prices[j]:</span><br><span class="line">                    answer[j] = i - j</span><br><span class="line">                    stack.remove(j)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        stack.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(stack) - <span class="number">1</span>):</span><br><span class="line">        answer[stack[i]] = len(prices) - stack[i] - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">print(solution([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>프로그래머스 스택/큐에 있는 문제였다.</p><p>문제의 원래 의도는 스택을 사용하여 푸는듯 하다.</p><p>스택으로 푸는건 실패했지만 다른사람이 푼 코드를 가져와서 살펴보았다.<br />주어지는 값이 커질수록 스택으로 푸는게 훨씬 유리하다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/05/Swift-%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift-미로탐색</title>
      <link>http://hongdonghyun.github.io/2020/05/Swift-%EB%AF%B8%EB%A1%9C%ED%83%90%EC%83%89/</link>
      <guid>http://hongdonghyun.github.io/2020/05/Swift-%EB%AF%B8%EB%A1%9C%ED%83%90%EC%83%89/</guid>
      <pubDate>Sun, 24 May 2020 13:22:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2178&quot; target=&quot;_blank&quot; rel=&quot;noop
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://www.acmicpc.net/problem/2178" target="_blank" rel="noopener">백준 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int, <span class="number">_</span> mage: [String])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// Int타입의 2차원배열 생성</span></span><br><span class="line">    <span class="keyword">let</span> mage = mage.<span class="built_in">map</span> &#123; $<span class="number">0</span>.compactMap &#123; <span class="type">Int</span>(<span class="type">String</span>($<span class="number">0</span>)) &#125; &#125;</span><br><span class="line">    <span class="comment">// 방문체크를 위한 2차원 배열</span></span><br><span class="line">    <span class="keyword">var</span> visit = [[<span class="type">Int</span>]](repeating: [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: y), <span class="built_in">count</span>: x)</span><br><span class="line">    <span class="comment">// 상,하,좌,우</span></span><br><span class="line">    <span class="keyword">let</span> dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>], dy = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// BFS</span></span><br><span class="line">    <span class="comment">// 위치정보를 담을 변수</span></span><br><span class="line">    <span class="keyword">var</span> queue: [(row: <span class="type">Int</span>, col: <span class="type">Int</span>)] = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">    <span class="comment">// 시작점</span></span><br><span class="line">    visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">        <span class="comment">// 방문</span></span><br><span class="line">        <span class="keyword">let</span> <span class="type">CURRENT</span> = queue.removeFirst()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"현재 위치:"</span>, <span class="type">CURRENT</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"현재 걸음 수:"</span>, visit[<span class="type">CURRENT</span>.row][<span class="type">CURRENT</span>.col])</span><br><span class="line">        <span class="comment">// 탈출조건: 현재위치가 x-1, y-1이라면 더이상 움직일 필요가 없다.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">CURRENT</span>.row == x-<span class="number">1</span> &amp;&amp; <span class="type">CURRENT</span>.col == y-<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> visit[<span class="type">CURRENT</span>.row][<span class="type">CURRENT</span>.col]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="type">NEXT</span>: (row: <span class="type">Int</span>, col: <span class="type">Int</span>) = (<span class="type">CURRENT</span>.row + dx[i], <span class="type">CURRENT</span>.col + dy[i])</span><br><span class="line">            <span class="keyword">if</span> <span class="type">NEXT</span>.row &gt;= <span class="number">0</span> &amp;&amp; <span class="type">NEXT</span>.row &lt; x &amp;&amp; <span class="type">NEXT</span>.col &gt;= <span class="number">0</span> &amp;&amp; <span class="type">NEXT</span>.col &lt; y &#123;</span><br><span class="line">                <span class="keyword">if</span> visit[<span class="type">NEXT</span>.row][<span class="type">NEXT</span>.col] == <span class="number">0</span> &amp;&amp; mage[<span class="type">NEXT</span>.row][<span class="type">NEXT</span>.col] == <span class="number">1</span> &#123;</span><br><span class="line">                    visit[<span class="type">NEXT</span>.row][<span class="type">NEXT</span>.col] = visit[<span class="type">CURRENT</span>.row][<span class="type">CURRENT</span>.col] + <span class="number">1</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"다음 위치:"</span>, <span class="type">NEXT</span>)</span><br><span class="line">                    queue.append(<span class="type">NEXT</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"----------------------------------------------"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input = [</span><br><span class="line">    <span class="string">"101111"</span>,</span><br><span class="line">    <span class="string">"101010"</span>,</span><br><span class="line">    <span class="string">"101011"</span>,</span><br><span class="line">    <span class="string">"111011"</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(solution(<span class="number">4</span>, <span class="number">6</span>, input)) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input2 = [</span><br><span class="line">    <span class="string">"110110"</span>,</span><br><span class="line">    <span class="string">"110110"</span>,</span><br><span class="line">    <span class="string">"111111"</span>,</span><br><span class="line">    <span class="string">"111101"</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(solution(<span class="number">4</span>, <span class="number">6</span>, input2)) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input3 = [</span><br><span class="line">    <span class="string">"1011101110111011101110111"</span>,</span><br><span class="line">    <span class="string">"1110111011101110111011101"</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(solution(<span class="number">2</span>, <span class="number">25</span>, input3)) <span class="comment">// 38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input4 = [</span><br><span class="line">    <span class="string">"1011111"</span>,</span><br><span class="line">    <span class="string">"1110001"</span>,</span><br><span class="line">    <span class="string">"1000001"</span>,</span><br><span class="line">    <span class="string">"1000001"</span>,</span><br><span class="line">    <span class="string">"1000001"</span>,</span><br><span class="line">    <span class="string">"1000001"</span>,</span><br><span class="line">    <span class="string">"1111111"</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(solution(<span class="number">7</span>, <span class="number">7</span>, input4)) <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>미로를 가장 빨리 탈출할 수 있는 길을 찾는 문제였다.</p><p>BFS를 사용하여 풀어보았다.</p><p>미로의 방문여부를 체크하는 2차원 배열을 만든 후,<br />길을 지날때 마다 해당배열의 값을 움직인 거리수로 바꾸어 주고<br />주어지는 입력과 현재위치가 동일할때 현재위치에 찍힌 거리수를 출력한다.</p><p>현재위치에서 상, 하, 좌, 우를 탐색할 수 있도록<br /><code>let dx = [0, 0, 1, -1], dy = [1, -1, 0, 0]</code><br />변수를 만들고</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="type">NEXT</span>: (row: <span class="type">Int</span>, col: <span class="type">Int</span>) = (<span class="type">CURRENT</span>.row + dx[i], <span class="type">CURRENT</span>.col + dy[i])</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>반복문을 통해 인접한 위치를 탐색해준다.</p><p>그 후 모든 조건을 통과한 경우 queue에 집어넣어주게 되고,</p><p>입력된 위치까지 반복하게 된다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/05/Swift-%EB%AF%B8%EB%A1%9C%ED%83%90%EC%83%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift-기지국 설치</title>
      <link>http://hongdonghyun.github.io/2020/05/Swift-%EA%B8%B0%EC%A7%80%EA%B5%AD-%EC%84%A4%EC%B9%98/</link>
      <guid>http://hongdonghyun.github.io/2020/05/Swift-%EA%B8%B0%EC%A7%80%EA%B5%AD-%EC%84%A4%EC%B9%98/</guid>
      <pubDate>Wed, 06 May 2020 06:22:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;문제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#문제&quot;&gt;&lt;/a&gt; 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/12979&quot; targe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h1><p><a href="https://programmers.co.kr/learn/courses/30/lessons/12979" target="_blank" rel="noopener">프로그래머스 링크</a></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solution</span><span class="params">(<span class="number">_</span> n:Int, <span class="number">_</span> stations:[Int], <span class="number">_</span> w:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// 최대범위는 2*w+1</span></span><br><span class="line">    <span class="comment">// 왼쪽 station - w</span></span><br><span class="line">    <span class="comment">// 오른쪽 station + w</span></span><br><span class="line">    <span class="keyword">var</span> answer: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> stationIdx: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (location &lt;= n) &#123;</span><br><span class="line">        <span class="comment">// 기지국 범위안에 있다!</span></span><br><span class="line">        <span class="keyword">if</span> (stationIdx &lt; stations.<span class="built_in">count</span>) &amp;&amp; (location &gt;= stations[stationIdx] - w) &#123;</span><br><span class="line">            <span class="comment">// 기지국 오른쪽 범위의 다음 한칸으로!</span></span><br><span class="line">            location = stations[stationIdx] + w + <span class="number">1</span></span><br><span class="line">            <span class="comment">// 기지국 배열의 다음거로</span></span><br><span class="line">            stationIdx += <span class="number">1</span></span><br><span class="line">        <span class="comment">// 범위에 없다!</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 설치하고 최대 범위 다음 한칸으로 이동</span></span><br><span class="line">            location += <span class="number">2</span>*w+<span class="number">1</span></span><br><span class="line">            answer += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h1><p>처음엔 배열에 담아서 풀다가 자꾸 터져서 다른 방법을 고민했다.</p><p>주어지는 파라미터들이 정렬된 상태로 주어지기 때문에</p><p>왼쪽에서부터 탐색을 하는 방식으로 진행했다.</p><p>기지국의 전파 최대 범위는 2*w+1 이라는걸 구한 후</p><blockquote><p>기지국 양쪽으로 전파가 닿으니 2*w이고 1은 기지국이 설치된 아파트이다.</p></blockquote><p>왼쪽의 최대 범위와 오른쪽 최대 범위를 이용해서</p><blockquote><p>station ± w</p></blockquote><p>현재 위치의 아파트에 기지국 전파가 닿는지 판단 후</p><p>닿는다면 오른쪽의 최대범위 + 1 만큼 이동하여<br />다시 탐색을 진행한다.</p><p>만약 범위가 닿지 않는다면 기지국을 설치해야하는 곳이고</p><p>설치 후 기지국의 최대범위 만큼 이동하여 다시 탐색을 하는 방식이다.</p><p>풀때는 몰랐는데 해당방식처럼 현재의 상태에서 최선의 방법을 선택하는것을 탐욕(Greedy)알고리즘 이라고 부르더라</p><p>어떠한 알고리즘을 선택하여 풀어야할지 공부를 좀 해야할것 같다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/05/Swift-%EA%B8%B0%EC%A7%80%EA%B5%AD-%EC%84%A4%EC%B9%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 상단 Toast</title>
      <link>http://hongdonghyun.github.io/2020/05/Swift-%EC%83%81%EB%8B%A8-Toast/</link>
      <guid>http://hongdonghyun.github.io/2020/05/Swift-%EC%83%81%EB%8B%A8-Toast/</guid>
      <pubDate>Tue, 05 May 2020 06:28:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;상단-토스트-메시지&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#상단-토스트-메시지&quot;&gt;&lt;/a&gt; 상단 토스트 메시지&lt;/h1&gt;
&lt;img src=&quot;/2020/05/Swift-%EC%83%81%EB%8B%A8-Toast/t
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="상단-토스트-메시지"><a class="markdownIt-Anchor" href="#상단-토스트-메시지"></a> 상단 토스트 메시지</h1><img src="/2020/05/Swift-%EC%83%81%EB%8B%A8-Toast/toast_img.jpeg" class="" title="noti_image"><p><a href="https://github.com/iOS-WPS-Team3/iOS-team3/tree/develop" target="_blank" rel="noopener">팀프로젝트</a> 진행중 이미지 처럼 앱 어디서든지 상단 알림창이 뜨게 만들어야 하는게 있었다.</p><p><code>ViewController</code>를 <code>extension</code>하여 코드를 추가하려고 했으나<br /><code>window</code>에도 오토레이아웃이 잡힌다고 해서 한번 시도해 보았다.</p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><p>해당 코드는 <a href="https://github.com/devxoul/Then" target="_blank" rel="noopener">Then</a>, <a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit</a> 을 사용한 코드입니다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KurlyNotification</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">KurlyNotification</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">NotiType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> warning</span><br><span class="line">    <span class="keyword">case</span> notice</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> warningLabel = <span class="type">UILabel</span>().then &#123;</span><br><span class="line">    $<span class="number">0</span>.backgroundColor = .systemPink</span><br><span class="line">    $<span class="number">0</span>.textColor = .white</span><br><span class="line">    $<span class="number">0</span>.layer.cornerRadius = <span class="number">5</span></span><br><span class="line">    $<span class="number">0</span>.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">    $<span class="number">0</span>.textAlignment = .center</span><br><span class="line">    $<span class="number">0</span>.font = .systemFont(ofSize: <span class="number">20</span>, weight: .bold)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> notificationLabel = <span class="type">UILabel</span>().then &#123;</span><br><span class="line">    $<span class="number">0</span>.backgroundColor = .white</span><br><span class="line">    $<span class="number">0</span>.textColor = .kurlyPurple1</span><br><span class="line">    $<span class="number">0</span>.layer.cornerRadius = <span class="number">5</span></span><br><span class="line">    $<span class="number">0</span>.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">    $<span class="number">0</span>.textAlignment = .center</span><br><span class="line">    $<span class="number">0</span>.font = .systemFont(ofSize: <span class="number">20</span>, weight: .bold)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> shadowView = <span class="type">UIView</span>().then &#123;</span><br><span class="line">    $<span class="number">0</span>.layer.shadowColor = <span class="type">UIColor</span>.black.cgColor</span><br><span class="line">    $<span class="number">0</span>.layer.shadowOpacity = <span class="number">0.6</span></span><br><span class="line">    $<span class="number">0</span>.layer.shadowOffset = .zero</span><br><span class="line">    $<span class="number">0</span>.layer.shadowRadius = <span class="number">5</span></span><br><span class="line">    $<span class="number">0</span>.layer.shadowOffset = <span class="type">CGSize</span>(width: <span class="number">0</span>, height: <span class="number">4</span>)</span><br><span class="line">    $<span class="number">0</span>.layer.masksToBounds = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> activityIndicatorView = <span class="type">UIActivityIndicatorView</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(text: String, type: NotiType)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> beforeShowLabel: <span class="type">UILabel?</span></span><br><span class="line">    <span class="keyword">switch</span> type &#123;</span><br><span class="line">    <span class="keyword">case</span> .notice:</span><br><span class="line">      beforeShowLabel = notificationLabel</span><br><span class="line">    <span class="keyword">case</span> .warning:</span><br><span class="line">      beforeShowLabel = warningLabel</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> window = appDelegate.window,</span><br><span class="line">    <span class="keyword">let</span> showLabel = beforeShowLabel</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    showLabel.text = text</span><br><span class="line">    window.addSubview(showLabel)</span><br><span class="line">    </span><br><span class="line">    showLabel.snp.makeConstraints &#123;</span><br><span class="line">      $<span class="number">0</span>.bottom.equalTo(window.snp.top)</span><br><span class="line">      $<span class="number">0</span>.centerX.equalToSuperview()</span><br><span class="line">      $<span class="number">0</span>.width.equalToSuperview().multipliedBy(<span class="number">0.88</span>)</span><br><span class="line">      $<span class="number">0</span>.height.equalTo(<span class="number">54</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    activityIndicatorView.isHidden = <span class="literal">false</span></span><br><span class="line">    activityIndicatorView.startAnimating()</span><br><span class="line"></span><br><span class="line">    <span class="type">UIView</span>.animate(withDuration: <span class="number">0.4</span>) &#123;</span><br><span class="line">      showLabel.transform = .<span class="keyword">init</span>(translationX: <span class="number">0</span>, y: <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="number">0.8</span>) &#123;</span><br><span class="line">      <span class="type">UIView</span>.animateKeyframes(withDuration: <span class="number">0.4</span>, delay: <span class="number">0</span>, animations: &#123;</span><br><span class="line">        showLabel.transform = .identity</span><br><span class="line">      &#125;, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        showLabel.removeFromSuperview()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KurlyNotification</span>.shared.show(text: <span class="string">"장바구니에 상품이 담겼습니다."</span>, type: .notice)</span><br></pre></td></tr></table></figure><h1 id="설명"><a class="markdownIt-Anchor" href="#설명"></a> 설명</h1><p>기존 코드는 타입별로 메서드가 달랐으나 다시보니 비슷한 형태의 코드가 중복으로 발생하고 있어 <code>enum</code>으로 타입을 구분하여 사용하도록 변경했다.</p><p>싱글톤을 사용하여 만들었고 이렇게 만들고 보니 <code>ViewController</code>에 제약을 받지 않아 어디서든지 <code>Toast</code>를 띄울 수 있었다.</p><p><code>window</code>에 오토레이아웃을 잡아서 사용할 수 있을거라곤 생각도 못했고 시도도 하지 못했는데<br />이번기회에 좋은공부가 된것 같다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/05/Swift-%EC%83%81%EB%8B%A8-Toast/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Swift 텍스트 효과 먹이기</title>
      <link>http://hongdonghyun.github.io/2020/05/Swift-%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%9A%A8%EA%B3%BC-%EB%A8%B9%EC%9D%B4%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2020/05/Swift-%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%9A%A8%EA%B3%BC-%EB%A8%B9%EC%9D%B4%EA%B8%B0/</guid>
      <pubDate>Tue, 05 May 2020 06:03:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;텍스트에-여러가지-효과-먹이기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#텍스트에-여러가지-효과-먹이기&quot;&gt;&lt;/a&gt; 텍스트에 여러가지 효과 먹이기&lt;/h1&gt;
&lt;p&gt;한줄에 표현되는 텍스트중에서 특정부분만 Bold가 되거
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="텍스트에-여러가지-효과-먹이기"><a class="markdownIt-Anchor" href="#텍스트에-여러가지-효과-먹이기"></a> 텍스트에 여러가지 효과 먹이기</h1><p>한줄에 표현되는 텍스트중에서 특정부분만 Bold가 되거나 색상이 달라져야 하는 경우가 있었다.</p><p>맨처음에는 달라져야하는 부분만 따로 <code>Label</code>로 지정하여 효과를 다르게 먹이려고 했는데</p><p>지인의 도움으로 <code>NSMutableAttributedString</code>이라는것을 사용해 보았다.</p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSMutableAttributedString</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bold</span><span class="params">(<span class="number">_</span> text: String, fontSize: CGFloat)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> attrs = [<span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">UIFont</span>.boldSystemFont(ofSize: fontSize)]</span><br><span class="line">    <span class="keyword">self</span>.append(<span class="type">NSMutableAttributedString</span>(string: text, attributes: attrs))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">normal</span><span class="params">(<span class="number">_</span> text: String, textColor: UIColor? = .black, fontSize: CGFloat)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> attrs: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>: <span class="type">Any</span>] = [</span><br><span class="line">      <span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">UIFont</span>.systemFont(ofSize: fontSize),</span><br><span class="line">      <span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor: textColor ?? .black</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">self</span>.append(<span class="type">NSMutableAttributedString</span>(string: text, attributes: attrs))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">underline</span><span class="params">(<span class="number">_</span> text: String, fontSize: CGFloat)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> attrs: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>: <span class="type">Any</span>] = [</span><br><span class="line">      <span class="type">NSAttributedString</span>.<span class="type">Key</span>.underlineStyle: <span class="type">NSUnderlineStyle</span>.single.rawValue,</span><br><span class="line">      <span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">UIFont</span>.systemFont(ofSize: fontSize)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">self</span>.append(<span class="type">NSMutableAttributedString</span>(string: text, attributes: attrs))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">strikethrough</span><span class="params">(<span class="number">_</span> text: String, textColor: UIColor = .black)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> attrs: <span class="type">NSMutableAttributedString</span> = <span class="type">NSMutableAttributedString</span>(string: text)</span><br><span class="line">    attrs.addAttribute(</span><br><span class="line">      <span class="type">NSAttributedString</span>.<span class="type">Key</span>.strikethroughStyle,</span><br><span class="line">      value: <span class="number">2</span>,</span><br><span class="line">      range: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: attrs.length)</span><br><span class="line">    )</span><br><span class="line">    attrs.addAttribute(</span><br><span class="line">      <span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor,</span><br><span class="line">      value: textColor,</span><br><span class="line">      range: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: attrs.length)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">self</span>.append(attrs)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> priceLabel = <span class="type">UILabel</span>().then &#123;</span><br><span class="line">    $<span class="number">0</span>.attributedText = <span class="type">NSMutableAttributedString</span>()</span><br><span class="line">      .bold(<span class="string">"2,185"</span>, fontSize: <span class="number">22</span>)</span><br><span class="line">      .normal(<span class="string">"원 "</span>, fontSize: <span class="number">18</span>)</span><br><span class="line">      .normal(<span class="string">"5%"</span>, textColor: .orange, fontSize: <span class="number">22</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="설명"><a class="markdownIt-Anchor" href="#설명"></a> 설명</h1><p><code>NSMutableAttributedString</code>을 Extension하여 먹일 수 있는 효과들을 따로 메서드로 만들었다.</p><p>사용법은 <code>Code</code>에 있다.<br />누군가에겐 도움이 되었으면 한다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/05/Swift-%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%9A%A8%EA%B3%BC-%EB%A8%B9%EC%9D%B4%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>addSubView된 ViewController 찾기</title>
      <link>http://hongdonghyun.github.io/2020/05/addSubView%EB%90%9C-ViewController-%EC%B0%BE%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2020/05/addSubView%EB%90%9C-ViewController-%EC%B0%BE%EA%B8%B0/</guid>
      <pubDate>Tue, 05 May 2020 04:50:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;addsubview된-부모-viewcontroller-찾기&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#addsubview된-부모-viewcontroller-찾기&quot;&gt;&lt;/a&gt; addSubView된 부모 ViewCont
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="addsubview된-부모-viewcontroller-찾기"><a class="markdownIt-Anchor" href="#addsubview된-부모-viewcontroller-찾기"></a> addSubView된 부모 ViewController 찾기</h1><p><code>Swift</code>에서 제공하는 모든 UI들은 기본적으로 <code>UIView</code>를 상속받아서 만들어졌다.</p><p>그렇다는것은 <code>UIView</code>에다가 추가적인 메서드를 구현한다면 모든 UI들이 해당 메서드를 사용할 수 있다고 생각한다.</p><p>최근 <a href="https://github.com/iOS-WPS-Team3/iOS-team3/tree/develop" target="_blank" rel="noopener">팀프로젝트</a>에서 <code>MVC</code> 디자인 패턴으로 코드를 쪼개고 나누다 보니 특정 UI를 제어하기가 좀 어려웠었다.</p><p>그럴때 사용하는것이 <code>delegate</code>인데 뎁스가 깊어지면 <code>delegate</code>를 중첩해서 써야하는 경우가 생겼다.</p><p>영 내키지 않아서 다른방법을 찾아보다 발견했던것이 <code>Notification</code>이었고 잘 사용하고 있었다.</p><p>하지만 이것도 썩 훌륭한 방법이 아니라고 생각이 들었다.</p><blockquote><p>프로젝트 규모가 커지면 커질수록 <code>Notification</code>이 너무 많아지다보니 관리의 스트레스가 장난없었다.</p></blockquote><p>조금 더 고민을 깊게 해보기로 했고, 우연히 <code>subview</code>된 목록들을 살펴보다 깨달음을 얻었다.</p><p>코드상에선 분명히 쪼개져 있어서 특정UI를 접근하기가 힘들었는데 <code>subviews</code>에서는 버젓이 출력되고 있었다.</p><p>그래서 고민하고 검색하며 찾아낸 코드가 다음의 코드이다.</p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 뷰컨트롤러 찾기</span></span><br><span class="line">  <span class="keyword">var</span> viewController: <span class="type">UIViewController?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> vc = <span class="keyword">self</span>.next <span class="keyword">as</span>? <span class="type">UIViewController</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> vc</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> superView = <span class="keyword">self</span>.superview &#123;</span><br><span class="line">      <span class="keyword">return</span> superView.viewController</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="설명"><a class="markdownIt-Anchor" href="#설명"></a> 설명</h1><p>재귀호출의 형태를 가지고 있고, 재귀조건과 탈출조건을 둘다 만족하고 있다.</p><p><code>addSubView</code>가 되지 않았다면 <code>ViewController</code>를 가지고 있을리 없으니 <code>Optional</code>의 형태로 만들었다.</p><p><code>self.next</code>는 <code>UIResponder</code>에 있는 <code>next</code>를 호출한다.</p><blockquote><p>UIView는 UIResponder를 상속받고 있습니다.</p></blockquote><blockquote><p>UIResponder는 특정이벤트를 누가 처리할지에 관한 내용들을 가지고 있습니다.</p></blockquote><blockquote><p>UIResponder Chain이라고 합니다.</p></blockquote><p>하지만 여기서는 이벤트 처리가 아닌 해당UI의 부모가 누군지 찾아내는 용도로 사용을 했다.</p><p>재귀의 형태를 띄고 있으니 <code>next</code>를 계속호출하여 타입이 <code>ViewController</code>인 녀석을 찾아냅니다.</p><blockquote><p>없다면 nil</p></blockquote><p>이렇게 <code>ViewController</code>를 찾아내어 <code>push</code> 또는 <code>navi push</code>등을 할 수 있다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/05/addSubView%EB%90%9C-ViewController-%EC%B0%BE%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OSI 7Layer</title>
      <link>http://hongdonghyun.github.io/2020/04/Network/</link>
      <guid>http://hongdonghyun.github.io/2020/04/Network/</guid>
      <pubDate>Wed, 01 Apr 2020 12:52:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;network&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#network&quot;&gt;&lt;/a&gt; Network&lt;/h1&gt;
&lt;h2 id=&quot;uri&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#uri&quot;&gt;&lt;/a&gt; U
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h1><h2 id="uri"><a class="markdownIt-Anchor" href="#uri"></a> URI</h2><p>인터넷의 자원을 유일하게 식별하기 위한 통합 자원 식별자</p><p>절대적 경로와 상대적경로를 포함하는 URL, URN의 상위개념</p><h3 id="url-주소"><a class="markdownIt-Anchor" href="#url-주소"></a> URL (주소)</h3><p>자원의 위체에 대한 절대경로값</p><blockquote><p>서울시 성동구 XX아파트</p></blockquote><h3 id="urn-주민등록번호"><a class="markdownIt-Anchor" href="#urn-주민등록번호"></a> URN (주민등록번호)</h3><p>위치에 독립적, 지속되는 형태의 자원을 가르키기 위한 유일 식별자<br />IETF에서 표준을 정함</p><blockquote><p>901010-1xxxxxx</p></blockquote><h2 id="tcpip-protocol-suite"><a class="markdownIt-Anchor" href="#tcpip-protocol-suite"></a> TCP/IP Protocol Suite</h2><p><code>Protocol Suite</code> 는 인터넷 네트워크에 쓰이는 프로토콜의 모음 <code>TCP/IP</code> 가 가장 많이 사용되기에 <code>TCP/IP</code> <code>프로토콜 스위트</code> 또는 <code>프로토콜 스택</code>이라고도 함</p><p><code>HTTP</code>, <code>FTP</code>, <code>Telnet</code> 등이 <code>TCP/IP</code> 기반</p><ul><li>TCP (Transmission Control Protocol) : 패킷 전송 여부와 순서 보장의 특징</li><li>IP (Internet Protocol) : 비신뢰성(패킷 전송 보장 X)과 비연결성의 특징 (IPv4, IPv6)</li></ul><h2 id="osi-7-layer"><a class="markdownIt-Anchor" href="#osi-7-layer"></a> OSI 7 Layer</h2><p>OSI 7 계층은 NetWork에서 통신이 일어난 과정을 7단계로 나눈것</p><h2 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why?</h2><p>계층을 나눈 이유는 통신이 일어나는 과정을 단계별로 파악할 수 있기 때문</p><ul><li>한눈에 알아보기 쉬움</li><li>이해하기 쉽다.(처음엔 어렵다)</li><li>특정계층에서 고장이나면 거기만 고치면 된다.</li></ul><table><thead><tr><th></th><th>OSI 7 Layer Model</th><th>TCP/IP Protocol</th></tr></thead><tbody><tr><td>7</td><td>Application</td><td>Application</td></tr><tr><td>6</td><td>Presentation</td><td>Application</td></tr><tr><td>5</td><td>Session</td><td>Application</td></tr><tr><td>4</td><td>Transport</td><td>Transport</td></tr><tr><td>3</td><td>Newwork</td><td>Internet</td></tr><tr><td>2</td><td>Data Link</td><td>Network Interface</td></tr><tr><td>1</td><td>Physical</td><td>Network Interface</td></tr></tbody></table><h2 id="7-application-layer응용-계층"><a class="markdownIt-Anchor" href="#7-application-layer응용-계층"></a> 7 Application Layer(응용 계층)</h2><p>최종 <code>Destination</code><br /><code>HTTP</code>, <code>FTP</code>, <code>SMTP</code>등의 프로토콜이 있다.</p><p>사용자와 가장 가까운 계층이며<br />통상적으로 우리가 만드는 프로그램들은 응용계층에서 동작하게 된다.</p><h2 id="6-presentation-layer표현-계층"><a class="markdownIt-Anchor" href="#6-presentation-layer표현-계층"></a> 6 Presentation Layer(표현 계층)</h2><p>송/수신한 데이터들의 가공을 담당한다.</p><blockquote><p>암/복호화, 압축, 인/디코딩 등을 말함</p></blockquote><h2 id="5-session-layer세션-계층"><a class="markdownIt-Anchor" href="#5-session-layer세션-계층"></a> 5 Session Layer(세션 계층)</h2><p>양 끝점간 통신을 시도할 경우 최초 연결 및 연결을 지속할 수 있도록 하는 계층</p><blockquote><p>연결을 열 수있다면 당연히 닫을 수도 있다.<br />여기서 한다.</p></blockquote><h2 id="4-transport-layer전송-계층"><a class="markdownIt-Anchor" href="#4-transport-layer전송-계층"></a> 4 Transport Layer(전송 계층)</h2><p>통신을 시도하기전 계층</p><p>전송방식을 결정하며, 오류검출 및 중복검사등을 진행한다.</p><blockquote><p>(CRC, 패리티비트? 뭐 이런거 였던걸로 기억)</p></blockquote><h2 id="3-network-layer네트워크-계층"><a class="markdownIt-Anchor" href="#3-network-layer네트워크-계층"></a> 3 Network Layer(네트워크 계층)</h2><p>데이터를 목적지(Destination)까지 전달을 담당<br />패킷 포워딩과 라우팅(패킷의 이동경로)을 결정한다.</p><h2 id="2-datalink-layer데이터링크-계층"><a class="markdownIt-Anchor" href="#2-datalink-layer데이터링크-계층"></a> 2 DataLink Layer(데이터링크 계층)</h2><p>물리계층을 통해 송수신 되는 데이터들의 주소(MAC 주소)할당과 오류감지를 한다.</p><h2 id="1-physical-layer물리-계층"><a class="markdownIt-Anchor" href="#1-physical-layer물리-계층"></a> 1 Physical Layer(물리 계층)</h2><p>통신 케이블로 부터 데이터를 송/수신하는 계층이며<br />여기서 사용되는 데이터들은 Bit단위 이며 우리가 알고 있는 0또는 1이다.</p><p>(0과 1은 전기적 신호가 On, Off로 만들어 지는것)</p><blockquote><p>파동, 주파수 라고 생각하자.</p></blockquote>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/04/Network/#disqus_thread</comments>
    </item>
    
    <item>
      <title>sync</title>
      <link>http://hongdonghyun.github.io/2020/02/sync/</link>
      <guid>http://hongdonghyun.github.io/2020/02/sync/</guid>
      <pubDate>Thu, 13 Feb 2020 13:48:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;sync&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sync&quot;&gt;&lt;/a&gt; sync&lt;/h1&gt;
&lt;h1 id=&quot;async&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#async&quot;&gt;&lt;/a&gt; async&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="sync"><a class="markdownIt-Anchor" href="#sync"></a> sync</h1><h1 id="async"><a class="markdownIt-Anchor" href="#async"></a> async</h1><p>호출한 함수가 종료되지 않아도 return</p><h1 id="dispatchqueue"><a class="markdownIt-Anchor" href="#dispatchqueue"></a> DispatchQueue</h1><h2 id="serial-queue"><a class="markdownIt-Anchor" href="#serial-queue"></a> Serial Queue</h2><h3 id="sync-2"><a class="markdownIt-Anchor" href="#sync-2"></a> sync</h3><p>[1, 2, 3] -&gt; [1]<br />큐에 가장먼저 등록된 작업이 실행되어야 다음 작업이 실행됨</p><blockquote><p>1이 끝나야 2의 작업이 실행된다.</p></blockquote><h3 id="async-2"><a class="markdownIt-Anchor" href="#async-2"></a> async</h3><p>[1, 2, 3]<br />앞에 누가 등록되어있는지 고려되지않는다.  다만 등록된 순서대로 실행된다.</p><h2 id="concurrent-queue"><a class="markdownIt-Anchor" href="#concurrent-queue"></a> Concurrent Queue</h2><h3 id="sync-3"><a class="markdownIt-Anchor" href="#sync-3"></a> sync</h3><p>큐에 가장먼저 등록된 작업이 실행되어야 다음 작업이 실행됨<br />sync인경우 concurrent, serial의 실행결과가 동일</p><h3 id="async-3"><a class="markdownIt-Anchor" href="#async-3"></a> async</h3><p>등록된 순서랑 상관없이 순서가 보장되지 않는다.</p><h2 id="system-dispatchqueue"><a class="markdownIt-Anchor" href="#system-dispatchqueue"></a> System DispatchQueue</h2><p>system이 제공하는 Queue는 main global이 있고 앱 실행시 자동생성</p><p>main -&gt; UI관련 업데이트<br />only async</p><blockquote><p>Serial async</p></blockquote><p>global -&gt; UI를 제외한 모든작업시 사용<br />async,sync 둘다 가능</p><blockquote><p>concurrent async<br />Qos를 사용하여 우선순위를 지정가능</p></blockquote><h2 id="custom-dispatchqueue"><a class="markdownIt-Anchor" href="#custom-dispatchqueue"></a> Custom DispatchQueue</h2><p>Non Main Thread</p><p>Serial / Concurrent, Qos등 여러 옵션을 지정하여 생성 가능하다.</p><h2 id="qos-quality-of-service"><a class="markdownIt-Anchor" href="#qos-quality-of-service"></a> Qos (Quality of Service)</h2><p>우선순위<br />6개의 Qos클래스가 존재하며 4개의 주요유형과 2개의 특수유형으로 구분</p><ul><li><p>User Interactive</p><ul><li>즉각 반응해야하는 작업 -&gt; 반응성 및 성능에 중점</li><li>main thread에서 동작하는 인터페이스 새로고침, 애니메이션등 유저와의 상호작용 작업에 할당</li></ul></li><li><p>User Initiated</p><ul><li>몇 초이내, 짧은시간내에 동작해야하는 작업시</li><li>문서를 열거나 버튼액션등 빠른결과를 요구하는 작업시</li></ul></li><li><p>Utility</p><ul><li>수초, 수분에 걸쳐 작업 반응성과 성능 에너지효율등의 균형중시</li><li>데이터를 불러오거나 다운로드 하는등의 작업, 진행표시줄로 표현된다.</li></ul></li><li><p>Background</p><ul><li>백그라운드에서 동작, 색인생성,동기화,백업등 사용자가 볼수 없는 작업에 할당</li><li>저전력 모드시 일시중지</li></ul></li><li><p>Default</p><ul><li>Qos를 지정하지 않으면 설정됨 User Initiated 와 Utility의 중간레벨</li><li>GCD global queue의 기본동작</li></ul></li><li><p>Unspecified</p><ul><li>Qos정보가 없으므로 시스템이 추론해야함</li></ul></li></ul>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/02/sync/#disqus_thread</comments>
    </item>
    
    <item>
      <title>gitignore 스크립트 만들기</title>
      <link>http://hongdonghyun.github.io/2020/02/gitignore-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <guid>http://hongdonghyun.github.io/2020/02/gitignore-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <pubDate>Tue, 04 Feb 2020 11:32:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;gitignore&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gitignore&quot;&gt;&lt;/a&gt; gitignore&lt;/h1&gt;
&lt;h2 id=&quot;gitignore란&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="gitignore"><a class="markdownIt-Anchor" href="#gitignore"></a> gitignore</h1><h2 id="gitignore란"><a class="markdownIt-Anchor" href="#gitignore란"></a> gitignore란?</h2><p>git으로 관리되고 있는 디렉토리내에서<br />git에 포함되지 않아야하는 <code>폴더</code>,<code>파일</code>들을 설정하게 제외시킬 수 있는설정파일</p><h2 id="gitignoreio"><a class="markdownIt-Anchor" href="#gitignoreio"></a> <a href="http://gitignore.io" target="_blank" rel="noopener">gitignore.io</a></h2><p><a href="http://gitignore.io/" target="_blank" rel="noopener">gitignore.io</a>여기로 가면 내가 원하는 gitignore파일을 만들 수 있다.</p><img src="/2020/02/gitignore-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/gitignore1.png" class="" title="gitignore1"><h2 id="매번-입력하기-귀찮으니-스크립트로-만들자"><a class="markdownIt-Anchor" href="#매번-입력하기-귀찮으니-스크립트로-만들자"></a> 매번 입력하기 귀찮으니 스크립트로 만들자</h2><p><a href="https://docs.gitignore.io/install/command-line" target="_blank" rel="noopener">gitignore docs</a><br />해당 링크로 가면 셸별로 command 명령어 모음이 있다.</p><p>해당 내용을 바탕으로 스크립트를 만들고 싶었다.<br /><code>git</code>자체에 명령을 추가하는 방식도 있지만 좀 더 범용적이게 <code>shell function</code>으로 만들려고 했다.</p><h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">gi</span></span>() &#123;</span><br><span class="line">    status_code=$(curl -s -o /dev/null -w <span class="string">"%&#123;http_code&#125;"</span> https://gitignore.io/api)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$status_code</span> = <span class="string">'200'</span> ]; <span class="keyword">then</span></span><br><span class="line">        curl -sLw <span class="string">'\n'</span> https://www.gitignore.io/api/<span class="variable">$@</span> &gt; .gitignore ;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'create .gitignore'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'create fail\n reason: request failed'</span>;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="사용법"><a class="markdownIt-Anchor" href="#사용법"></a> 사용법</h3><p>사용법은 다음과 같다.</p><ol><li>터미널을 킨다.</li><li>zshrc파일을 열어준다 (MacOS의 경우 ~/로 가면 .zshrc가 있다.)</li><li>.zshrc 파일 제일밑에 해당 함수를 넣어준다.</li><li>터미널에서 <code>source ~/.zshrc</code> 혹은 터미널만 껐다킨다.</li><li>이후 <code>.gitignore</code>를 만들고 싶은곳에서 <code>gi macos,python,swift</code> 등 내가 추가하고 싶은 파일을 <code>,</code>단위로 구분하여 입력한다.</li><li>생성된 파일을 확인</li></ol><h3 id="설명"><a class="markdownIt-Anchor" href="#설명"></a> 설명</h3><p>해당 함수는 두번에 걸쳐 <a href="http://gitignore.io/" target="_blank" rel="noopener">gitignore.io</a>에 <code>request</code>를 보낸다.<br />첫번째는 해당 서버가 살아있는지 확인후</p><blockquote><p>status code가 200이 떨어지는경우를 살아있다고 판단.</p></blockquote><p><a href="http://gitignore.io/" target="_blank" rel="noopener">gitignore.io</a>에 API로 터미널에서 입력받은 파라미터들을 붙여서 <code>GET</code>요청을 보낸다.<br />그러면 <code>response</code>에 해당 파라미터들에 관한 <code>ignore</code>내용들이 나오는데<br />내용들을 .gitignore라는 파일에 덮어씌우고 정상 생성되었다는 메시지를 출력하고 종료한다.</p><blockquote><p>이경우 파일이 없다면 자동으로 생성된다.</p></blockquote><p>만약 서버가 살아있지않다면 파일생성을 하지 않고 실패했다는 메시지를 출력하고 종료한다.</p><h2 id="마치며"><a class="markdownIt-Anchor" href="#마치며"></a> 마치며</h2><p>사실 셸 스크립트를 다루어본적은 몇번 없어서 저 짧은 코드를 쓰는데 꽤나 애를먹었다.<br />그래도 검색을 하고 내가 원하는 내용인지 판단하고 테스트하는 실력이 많이 올라온것같아 기분이 좋다.</p>]]></content:encoded>
      
      <comments>http://hongdonghyun.github.io/2020/02/gitignore-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
